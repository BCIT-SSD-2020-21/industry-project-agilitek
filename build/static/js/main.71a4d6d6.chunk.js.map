{"version":3,"sources":["images/agilitek.svg","components/WorkflowItem/WorkflowItem.js","api/network.js","components/WorkflowTable/WorkflowTable.js","components/Landing/userDash.js","components/WorkflowForm/MappingInput.js","components/WorkflowForm/DeleteModal.js","components/WorkflowForm/WorfkflowForm.js","components/ErrorPage/ErrorPage.js","components/ExecutionTable/ExecutionTable.js","components/WorkflowDetails/DetailInput.js","components/WorkflowDetails/WorkflowDetail.js","App.js","index.js"],"names":["WorkflowItem","workflow","href","className","aria-hidden","name","Frequency","url","getAllWorkflows","a","axios","get","res","data","console","log","createWorkflow","post","getWorkflow","id","updateWorkflow","put","deleteWorkflow","delete","getWorkflowLogs","getSalesForceFlow","actions","getWorkflowInputs","flowUrl","getMetadata","sObjectType","metadata","getDBTables","JSON","parse","body","getDBColumns","table_name","classNames","classes","filter","Boolean","join","statusStyles","true","false","failed","useStyles","makeStyles","theme","loading","height","display","flexDirection","alignItems","justifyContent","WorkflowTable","search","history","useHistory","useState","workflows","setWorkflows","setLoading","limit","offset","setOffset","resData","setResData","fetchWorkflows","useRef","current","slice","setTimeout","handlePrevClicked","Math","max","handleNextClicked","length","useEffect","CircularProgress","e","includes","value","map","aria-label","onClick","toLowerCase","to","currency","active","type","push","navigation","icon","HomeIcon","ClockIcon","DocumentReportIcon","secondaryNavigation","CogIcon","QuestionMarkCircleIcon","ShieldCheckIcon","UserDash","children","page","setSearch","sidebarOpen","setSidebarOpen","Root","show","as","Fragment","static","open","onClose","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","src","alt","item","aria-current","undefined","agilitek","action","method","htmlFor","placeholder","onChange","target","Button","Items","Item","MappingInput","dbColumns","sfMetadata","tempMapping","setTempMapping","mappingKey","mappingValue","setAlertMessage","setSnackbarOpen","setMetaData","column","setColumn","isAdded","setIsAdded","handleAlertMessage","message","disabled","md","idx","label","dbColumn","column_name","style","backgroundColor","hasOwnProperty","result","Object","keys","reduce","object","key","prev","Modal","delModalOpen","delModalClose","setOpen","processing","setProcessing","cancelButtonRef","deleteClicked","initialFocus","Title","opacity","ref","UserForm","useParams","desc","table","whereClause","mapping","runAgain","formData","setFormData","dbTables","setDbTables","setDBColumns","setSfMetadata","processsing","mappings","setMappings","alertMessage","snackbarOpen","setDelModalOpen","isLoading","setIsLoading","dbTablesRes","sfFlowRes","description","flow_url","sobject_type","where_clause","run_again","metadataRes","dbColumnsRes","temp","submit","preventDefault","handleSnackbarClose","event","reason","handleChange","handleWorkflowChange","sfInputsRes","handleDelete","onSubmit","dbTable","marginTop","rows","Group","checked","Label","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","WorkflowDetail","setOptions","query","sql_query","ExecutionTable","logArray","setLogArray","scope","logs","i","workflow_id","action_name","Date","time_of_completion","toLocaleString","timeZone","is_flow_successful","DetailInput","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"+NAAe,MAA0B,qC,8CCkC1BA,EA/BM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACE,mBACEC,KAAMD,EAASC,KACfC,UAAU,4CAFZ,SAIE,uBAAMA,UAAU,8BAAhB,UACE,uBAAMA,UAAU,iCAAhB,UACE,cAAC,IAAD,CACEA,UAAU,sCACVC,cAAY,SAEd,uBAAMD,UAAU,+CAAhB,UACE,sBAAMA,UAAU,WAAhB,SAA4BF,EAASI,OACrC,+BACE,sBAAMF,UAAU,4BAAhB,SACGF,EAASK,oBAMlB,cAAC,IAAD,CACEH,UAAU,sCACVC,cAAY,e,iBC1BhBG,EAAM,8DAIL,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,+EAEmBC,IAAMC,IAAN,UAAaJ,EAAb,iBAFnB,cAEOK,EAFP,yBAGQA,EAAIC,MAHZ,gCAKCC,QAAQC,IAAR,MALD,0D,sBAUA,SAAeC,EAAtB,kC,4CAAO,WAA8BH,GAA9B,eAAAJ,EAAA,+EAEmBC,IAAMO,KAAN,UAAcV,EAAd,gBAAiCM,GAFpD,cAEOD,EAFP,yBAGQA,EAAIC,MAHZ,gCAKCC,QAAQC,IAAR,MALD,0D,sBASA,SAAeG,EAAtB,kC,4CAAO,WAA2BC,GAA3B,eAAAV,EAAA,+EAEmBC,IAAMC,IAAN,UAAaJ,EAAb,wBAAgCY,IAFnD,cAEOP,EAFP,yBAGQA,EAAIC,MAHZ,gCAKCC,QAAQC,IAAR,MALD,0D,sBAUA,SAAeK,EAAtB,oC,4CAAO,WAA8BD,EAAIN,GAAlC,eAAAJ,EAAA,+EAEmBC,IAAMW,IAAN,UAAad,EAAb,wBAAgCY,GAAMN,GAFzD,cAEOD,EAFP,yBAGQA,EAAIC,MAHZ,gCAKCC,QAAQC,IAAR,MALD,0D,sBAUA,SAAeO,EAAtB,kC,4CAAO,WAA8BH,GAA9B,eAAAV,EAAA,+EAEmBC,IAAMa,OAAN,UAAgBhB,EAAhB,wBAAmCY,IAFtD,cAEOP,EAFP,yBAGQA,EAAIC,MAHZ,gCAKCC,QAAQC,IAAR,MALD,0D,sBAUA,SAAeS,EAAtB,kC,4CAAO,WAA+BL,GAA/B,eAAAV,EAAA,+EAEmBC,IAAMC,IAAN,UAAaJ,EAAb,6BAAqCY,IAFxD,cAEOP,EAFP,yBAGQA,EAAIC,MAHZ,gCAKCC,QAAQC,IAAR,MALD,0D,sBAYA,SAAeU,IAAtB,+B,4CAAO,4BAAAhB,EAAA,+EAEmBC,IAAMC,IAAN,UAAaJ,EAAb,qBAFnB,cAEOK,EAFP,yBAGQA,EAAIC,KAAKa,SAHjB,gCAKCZ,QAAQC,IAAR,MALD,0D,sBAUA,SAAeY,EAAtB,kC,4CAAO,WAAiCC,GAAjC,eAAAnB,EAAA,+EAEmBC,IAAMC,IAAN,UACXJ,EADW,yCACyBqB,IAH5C,cAEOhB,EAFP,yBAMQA,EAAIC,MANZ,gCAQCC,QAAQC,IAAR,MARD,0D,sBAaA,SAAec,EAAtB,kC,4CAAO,WAA2BC,GAA3B,eAAArB,EAAA,+EAEmBC,IAAMC,IAAN,UACXJ,EADW,iDACiCuB,IAHpD,cAEOlB,EAFP,yBAMQA,EAAIC,KAAKkB,UANjB,gCAQCjB,QAAQC,IAAR,MARD,0D,sBAeA,SAAeiB,IAAtB,+B,4CAAO,4BAAAvB,EAAA,+EAEmBC,IAAMC,IAAN,UAAaJ,EAAb,cAFnB,cAEOK,EAFP,yBAIQqB,KAAKC,MAAMtB,EAAIC,KAAKsB,OAJ5B,gCAMCrB,QAAQC,IAAR,MAND,0D,sBAWA,SAAeqB,EAAtB,kC,4CAAO,WAA4BC,GAA5B,eAAA5B,EAAA,+EAEmBC,IAAMC,IAAN,UAAaJ,EAAb,qBAA6B8B,EAA7B,aAFnB,cAEOzB,EAFP,yBAIQA,EAAIC,MAJZ,gCAMCC,QAAQC,IAAR,MAND,0D,4CC5GP,SAASuB,IAAwB,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAC5B,OAAOA,EAAQC,OAAOC,SAASC,KAAK,KAGxC,IAAMC,EAAe,CACjBC,KAAM,8BACNC,MAAO,0BACPC,OAAQ,6BAGNC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,QAAS,CACLC,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,cAgPTC,EA5OO,SAACC,GACnB,IAAMC,EAAUC,cACVpB,EAAUQ,IAEhB,EAAkCa,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOV,EAAP,KAAgBa,EAAhB,KACA,EAAgBH,mBAAS,GAAlBI,EAAP,oBACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACMC,EAAiBC,kBAAO,eAE9BD,EAAeE,QAAf,sBAAyB,sBAAA9D,EAAA,sDACrB,sBAAC,8BAAAA,EAAA,sEACqBD,IADrB,OACSI,EADT,OAEGwD,EAAWxD,GACLC,EAAOD,EAAI4D,MAAMP,EAAQA,EAASD,GACxCF,EAAajD,GACb4D,YAAW,kBAAMV,GAAW,KAAQ,KALvC,0CAAD,GADqB,2CAUzB,IAAMW,EAAiB,uCAAG,sBAAAjE,EAAA,sDACtByD,EAAUS,KAAKC,IAAI,EAAGX,EAAS,IADT,2CAAH,qDAIjBY,EAAiB,uCAAG,sBAAApE,EAAA,sDAClB0D,EAAQW,OAASb,EAASD,GAC1BE,EAAUD,EAAS,GAFD,2CAAH,qDAevB,OARAc,qBAAU,WACNV,EAAeE,YAChB,IAEHQ,qBAAU,WACNV,EAAeE,YAChB,CAACN,IAGA,mCACKf,EACG,sBAAK/C,UAAWoC,EAAQW,QAAxB,UACI,oBAAI/C,UAAU,OAAd,wBACA,cAAC6E,EAAA,EAAD,OAGJ,sBAAK7E,UAAU,OAAf,UACI,oBAAIA,UAAU,0FAAd,uBAKA,sBAAKA,UAAU,mBAAf,UACI,oBAAIA,UAAU,iEAAd,SACK0D,EACIrB,QAAO,SAACyC,GACL,OAAIA,EAAE5E,KAAK6E,SAASzB,EAAO0B,MAAM1B,QACtBwB,EAGJ,MAEVG,KAAI,SAACH,GAAD,OACD,6BACI,cAAC,EAAD,CAAchF,SAAUgF,KADnBA,EAAE9D,SAMvB,qBACIhB,UAAU,gFACVkF,aAAW,aAFf,SAII,sBAAKlF,UAAU,8BAAf,UACI,wBACImF,QAASZ,EACTvE,UAAU,+IAFd,sBAMA,wBACImF,QAAST,EACT1E,UAAU,oJAFd,0BAWZ,qBAAKA,UAAU,kBAAf,SACI,qBAAKA,UAAU,yCAAf,SACI,qBAAKA,UAAU,qBAAf,SACI,sBAAKA,UAAU,+EAAf,UACI,wBAAOA,UAAU,sCAAjB,UACI,gCACI,+BACI,oBAAIA,UAAU,4FAAd,sBAGA,oBAAIA,UAAU,6FAAd,uBAGA,oBAAIA,UAAU,4GAAd,oBAGA,oBAAIA,UAAU,6FAAd,uBAKR,uBAAOA,UAAU,oCAAjB,SACK0D,EACIrB,QAAO,SAACvC,GACL,OACIA,EAASI,KACJkF,cACAL,SACGzB,EAAO0B,MAAM1B,OAAO8B,eAGrBtF,EAGJ,MAEVmF,KAAI,SAACnF,GAAD,OACD,qBAEIE,UAAU,WAFd,UAII,oBAAIA,UAAU,mEAAd,SACI,qBAAKA,UAAU,OAAf,SACI,mBAAGA,UAAU,mDAAb,SACI,cAAC,IAAD,CACIA,UAAU,mIACVqF,GAAE,mBAAcvF,EAASkB,IAF7B,SAKQlB,EAASI,aAO7B,qBAAIF,UAAU,+DAAd,UACI,sBAAMA,UAAU,4BAAhB,SAEQF,EAASK,YAGhBL,EAASwF,YAEd,oBAAItF,UAAU,oDAAd,SACI,sBACIA,UAAWmC,EACPK,EACI1C,EACKyF,QAET,sFANR,SASKzF,EAASyF,OACJ,SACA,eAGd,oBAAIvF,UAAU,+DAAd,SACI,wBACIwF,KAAK,SACLxF,UAAU,yNACVmF,QAAS,kBACL5B,EAAQkC,KAAR,qBACkB3F,EAASkB,MALnC,2BA1CClB,EAASkB,YA2DlC,sBACIhB,UAAU,wFACVkF,aAAW,aAFf,UAII,qBAAKlF,UAAU,kBAAf,SACI,oBAAGA,UAAU,wBAAb,oBACY,IACR,sBAAMA,UAAU,cAAhB,SACK8D,EAAS,IACN,IAJZ,KAKO,IACH,sBAAM9D,UAAU,cAAhB,SACK8D,EAASD,IACN,IARZ,KASO,IACH,sBAAM7D,UAAU,cAAhB,SACKgE,EAAQW,SACL,IAZZ,eAgBJ,sBAAK3E,UAAU,6CAAf,UACI,wBACImF,QAASZ,EACTvE,UAAU,2JAFd,sBAMA,wBACImF,QAAST,EACT1E,UAAU,gKAFd,uCC9NtC0F,EAAa,CACf,CAAExF,KAAM,OAAQH,KAAM,IAAK4F,KAAMC,IAAUxB,SAAS,GACpD,CAAElE,KAAM,UAAWH,KAAM,IAAK4F,KAAME,IAAWzB,SAAS,GACxD,CAAElE,KAAM,aAAcH,KAAM,IAAK4F,KAAMG,IAAoB1B,SAAS,IAElE2B,EAAsB,CACxB,CAAE7F,KAAM,WAAYH,KAAM,IAAK4F,KAAMK,KACrC,CAAE9F,KAAM,OAAQH,KAAM,IAAK4F,KAAMM,KACjC,CAAE/F,KAAM,UAAWH,KAAM,IAAK4F,KAAMO,MAGxC,SAAS/D,IAAwB,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAC5B,OAAOA,EAAQC,OAAOC,SAASC,KAAK,KAGzB,SAAS4D,EAAT,GAAuC,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KACzC,EAA4B5C,mBAAS,IAArC,mBAAOH,EAAP,KAAegD,EAAf,KACA,EAAsC7C,oBAAS,GAA/C,mBAAO8C,EAAP,KAAoBC,EAApB,KACMjD,EAAUC,cAChB,OACI,sBAAKxD,UAAU,4CAAf,UACI,cAAC,IAAWyG,KAAZ,CAAiBC,KAAMH,EAAaI,GAAIC,WAAxC,SACI,eAAC,IAAD,CACID,GAAG,MACHE,QAAM,EACN7G,UAAU,oCACV8G,KAAMP,EACNQ,QAASP,EALb,UAOI,cAAC,IAAWQ,MAAZ,CACIL,GAAIC,WACJK,MAAM,8CACNC,UAAU,YACVC,QAAQ,cACRC,MAAM,8CACNC,UAAU,cACVC,QAAQ,YAPZ,SASI,cAAC,IAAOC,QAAR,CAAgBvH,UAAU,8CAE9B,cAAC,IAAWgH,MAAZ,CACIL,GAAIC,WACJK,MAAM,gDACNC,UAAU,oBACVC,QAAQ,gBACRC,MAAM,gDACNC,UAAU,gBACVC,QAAQ,oBAPZ,SASI,sBAAKtH,UAAU,sEAAf,UACI,cAAC,IAAWgH,MAAZ,CACIL,GAAIC,WACJK,MAAM,2BACNC,UAAU,YACVC,QAAQ,cACRC,MAAM,2BACNC,UAAU,cACVC,QAAQ,YAPZ,SASI,qBAAKtH,UAAU,qCAAf,SACI,yBACIA,UAAU,iIACVmF,QAAS,kBAAMqB,GAAe,IAFlC,UAII,sBAAMxG,UAAU,UAAhB,2BAGA,cAAC,IAAD,CACIA,UAAU,qBACVC,cAAY,gBAK5B,qBAAKD,UAAU,uCAAf,SACI,qBACIA,UAAU,aACVwH,IAAI,GACJC,IAAI,eAGZ,sBACIzH,UAAU,qEACVkF,aAAW,UAFf,UAII,qBAAKlF,UAAU,iBAAf,SACK0F,EAAWT,KAAI,SAACyC,GAAD,OACZ,oBAEI3H,KAAM2H,EAAK3H,KACXC,UAAWmC,EACPuF,EAAKtD,QACC,yBACA,mDACN,sEAEJuD,eACID,EAAKtD,QACC,YACAwD,EAZd,UAeI,cAACF,EAAK/B,KAAN,CACI3F,UAAU,6BACVC,cAAY,SAEfyH,EAAKxH,OAlBDwH,EAAKxH,WAsBtB,qBAAKF,UAAU,YAAf,SACI,qBAAKA,UAAU,iBAAf,SACK+F,EAAoBd,KAAI,SAACyC,GAAD,OACrB,oBAEI3H,KAAM2H,EAAK3H,KACXC,UAAU,sHAHd,UAKI,cAAC0H,EAAK/B,KAAN,CACI3F,UAAU,6BACVC,cAAY,SAEfyH,EAAKxH,OARDwH,EAAKxH,qBAgBtC,qBAAKF,UAAU,qBAAqBC,cAAY,cAOxD,qBAAKD,UAAU,kCAAf,SACI,qBAAKA,UAAU,qBAAf,SAEI,sBAAKA,UAAU,gEAAf,UACI,qBAAKA,UAAU,uCAAf,SAEI,qBACIA,UAAU,WACVwH,IAAKK,EACLJ,IAAI,oBAGZ,sBACIzH,UAAU,qEACVkF,aAAW,UAFf,UAII,qBAAKlF,UAAU,iBAAf,SACK0F,EAAWT,KAAI,SAACyC,GAAD,OACZ,oBAEI3H,KAAM2H,EAAK3H,KACXC,UAAWmC,EACPuF,EAAKtD,QACC,yBACA,mDACN,8EAEJuD,eACID,EAAKtD,QAAU,YAASwD,EAVhC,UAaI,cAACF,EAAK/B,KAAN,CACI3F,UAAU,6BACVC,cAAY,SAEfyH,EAAKxH,OAhBDwH,EAAKxH,WAoBtB,qBAAKF,UAAU,YAAf,SACI,qBAAKA,UAAU,iBAAf,SACK+F,EAAoBd,KAAI,SAACyC,GAAD,OACrB,oBAEI3H,KAAM2H,EAAK3H,KACXC,UAAU,8HAHd,UAKI,cAAC0H,EAAK/B,KAAN,CACI3F,UAAU,6BACVC,cAAY,SAEfyH,EAAKxH,OARDwH,EAAKxH,uBAkB1C,sBAAKF,UAAU,0CAAf,UACI,sBAAKA,UAAU,yFAAf,UACI,yBACIA,UAAU,6HACVmF,QAAS,kBAAMqB,GAAe,IAFlC,UAII,sBAAMxG,UAAU,UAAhB,0BACA,cAAC,IAAD,CAAcA,UAAU,UAAUC,cAAY,YAGlD,sBAAKD,UAAU,2EAAf,UACI,qBAAKA,UAAU,cAAf,SACI,uBACIA,UAAU,sBACV8H,OAAO,IACPC,OAAO,MAHX,UAKI,uBACIC,QAAQ,eACRhI,UAAU,UAFd,oBAMA,sBAAKA,UAAU,2DAAf,UACI,qBACIA,UAAU,kEACVC,cAAY,OAFhB,SAII,cAAC,IAAD,CACID,UAAU,UACVC,cAAY,WAGpB,uBACIe,GAAG,eACHd,KAAK,eACLF,UAAU,+JACViI,YAAY,mBACZC,SAAU,SAACpD,GACPwB,EAAUxB,EAAEqD,OAAOnD,QAEvBQ,KAAK,mBAKrB,sBAAKxF,UAAU,iCAAf,UACI,yBAAQA,UAAU,sIAAlB,UACI,sBAAMA,UAAU,UAAhB,gCAGA,cAAC,IAAD,CACIA,UAAU,UACVC,cAAY,YAKpB,cAAC,IAAD,CAAM0G,GAAG,MAAM3G,UAAU,gBAAzB,SACK,gBAAG8G,EAAH,EAAGA,KAAH,OACG,qCACI,8BACI,eAAC,IAAKsB,OAAN,CAAapI,UAAU,4KAAvB,UACI,qBACIA,UAAU,uBACVwH,IAAI,iIACJC,IAAI,KAER,uBAAMzH,UAAU,yDAAhB,UACI,uBAAMA,UAAU,UAAhB,+BACuB,OAF3B,4BAMA,cAAC,IAAD,CACIA,UAAU,2DACVC,cAAY,cAIxB,cAAC,IAAD,CACIyG,KAAMI,EACNH,GAAIC,WACJK,MAAM,mCACNC,UAAU,+BACVC,QAAQ,kCACRC,MAAM,iCACNC,UAAU,kCACVC,QAAQ,+BARZ,SAUI,eAAC,IAAKe,MAAN,CACIxB,QAAM,EACN7G,UAAU,qIAFd,UAII,cAAC,IAAKsI,KAAN,UACK,gBAAG/C,EAAH,EAAGA,OAAH,OACG,mBACIxF,KAAK,IACLC,UAAWmC,EACPoD,EACM,cACA,GACN,yCANR,6BAaR,cAAC,IAAK+C,KAAN,UACK,gBAAG/C,EAAH,EAAGA,OAAH,OACG,mBACIxF,KAAK,IACLC,UAAWmC,EACPoD,EACM,cACA,GACN,yCANR,yBAaR,cAAC,IAAK+C,KAAN,UACK,gBAAG/C,EAAH,EAAGA,OAAH,OACG,mBACIxF,KAAK,IACLC,UAAWmC,EACPoD,EACM,cACA,GACN,yCANR,2CAqBxC,sBAAMvF,UAAU,2CAAhB,SAEI,qBAAKA,UAAU,kBAAf,SACI,qBAAKA,UAAU,+CAAf,SACI,sBAAKA,UAAU,iFAAf,UACI,qBAAKA,UAAU,iBAAf,SAEI,sBAAKA,UAAU,oBAAf,UACI,qBACIA,UAAU,yCACVwH,IAAI,iIACJC,IAAI,KAER,gCACI,sBAAKzH,UAAU,oBAAf,UACI,qBACIA,UAAU,mCACVwH,IAAI,iIACJC,IAAI,KAER,oBAAIzH,UAAU,2EAAd,qDAKJ,qBAAIA,UAAU,8DAAd,UACI,oBAAIA,UAAU,UAAd,qBAGA,qBAAIA,UAAU,yEAAd,UACI,cAAC,IAAD,CACIA,UAAU,6CACVC,cAAY,SAHpB,wBAOA,oBAAID,UAAU,UAAd,4BAGA,qBAAIA,UAAU,sFAAd,UACI,cAAC,IAAD,CACIA,UAAU,8CACVC,cAAY,SAHpB,iCAWhB,qBAAKD,UAAU,sCAAf,SACc,SAATqG,EACG,mCACI,wBACIb,KAAK,SACLxF,UAAU,yNACVmF,QAAS,kBACL5B,EAAQkC,KAAK,YAJrB,4BAiBJ,wBACID,KAAK,SACLxF,UAAU,yNACVmF,QAAS,kBAAM5B,EAAQkC,KAAK,MAHhC,0CAcvBW,GAAsB,cAAC,EAAD,CAAepB,MAAO,CAAE1B,kB,qBClchD,SAASiF,GAAT,GASX,IARAC,EAQD,EARCA,UACAC,EAOD,EAPCA,WACAC,EAMD,EANCA,YACAC,EAKD,EALCA,eACAC,EAID,EAJCA,WACAC,EAGD,EAHCA,aACAC,EAED,EAFCA,gBACAC,EACD,EADCA,gBAEA,EAAgCtF,mBAAS,IAAzC,mBAAO7B,EAAP,KAAiBoH,EAAjB,KACA,EAA4BvF,mBAAS,IAArC,mBAAOwF,EAAP,KAAeC,EAAf,KACA,EAA8BzF,oBAAS,GAAvC,mBAAO0F,EAAP,KAAgBC,EAAhB,KAGAxE,qBAAU,WACFgE,GAAcC,IACdG,EAAYJ,GACZM,EAAUL,GACVO,GAAW,MAEhB,CAACR,EAAYC,IAGhB,IAAMQ,EAAqB,SAAC,GAAuB,IAArB7D,EAAoB,EAApBA,KAAM8D,EAAc,EAAdA,QAChCP,GAAgB,GAChBD,EAAgB,CACZtD,OACA8D,aA0DR,OACI,sBAAKtJ,UAAU,uDAAf,UACI,sBAAKA,UAAU,gBAAf,UAGI,uBACIgI,QAAQ,WACRhI,UAAU,0CAFd,iCAMA,yBACIgB,GAAG,WACHd,KAAK,WACL8E,MAAOpD,EACP5B,UAAU,+JACVkI,SAAU,SAACpD,GAAD,OAAOkE,EAAYlE,EAAEqD,OAAOnD,QACtCuE,SAAUJ,EANd,UAQI,wBAAQnE,MAAM,GAAd,gCACCyD,EAAWxD,KAAI,SAACuE,EAAIC,GACjB,OACI,wBAAQzE,MAAOwE,EAAGtJ,KAAlB,SACKsJ,EAAGE,OADqBD,YAO7C,sBAAKzJ,UAAU,gBAAf,UAEI,uBACIgI,QAAQ,UACRhI,UAAU,0CAFd,6BAMA,yBACIgB,GAAG,UACHd,KAAK,SACL8E,MAAOiE,EACPjJ,UAAU,+JACVkI,SAAU,SAACpD,GAAD,OAAOoE,EAAUpE,EAAEqD,OAAOnD,QACpCuE,SAAUJ,EANd,UAQI,wBAAQnE,MAAM,GAAd,8BACCwD,EAAUvD,KAAI,SAAC0E,EAAUF,GACtB,OACI,wBAAQzE,MAAO2E,EAASC,YAAxB,SACKD,EAASC,aAD4BH,YAO1D,qBAAKzJ,UAAU,qBAAf,SACKmJ,EACG,wBACI3D,KAAK,SACLxF,UAAU,kPACV6J,MAAO,CACHC,gBAAiB,WAErB3E,QArFS,WACzB,GACIuD,EAAYqB,eAAenI,IAC3B8G,EAAY9G,KAAcqH,EAC5B,CAEE,IAAMe,EAASC,OAAOC,KAAKxB,GAAayB,QAAO,SAACC,EAAQC,GAIpD,OAHIA,IAAQzI,IACRwI,EAAOC,GAAO3B,EAAY2B,IAEvBD,IACR,IAEHzB,EAAeqB,GAEfX,EAAmB,CACf7D,KAAM,UACN8D,QAAQ,GAAD,OAAK1H,EAAL,aAAkBqH,EAAlB,qCA8DH,oBAWA,wBACIzD,KAAK,SACLxF,UAAU,kPACV6J,MAAO,CACHC,gBAAiB,WAErB3E,QAhIM,WAGlBvD,GAAYqH,EAGRP,EAAYqB,eAAenI,IAC3B8G,EAAY9G,KAAcqH,EAE1BI,EAAmB,CACf7D,KAAM,QACN8D,QAAQ,GAAD,OAAK1H,EAAL,aAAkBqH,EAAlB,8BAGXN,GAAe,SAAC2B,GAAD,oBAAC,gBACTA,GADQ,kBAEV1I,EAAWqH,OAGhBI,EAAmB,CACf7D,KAAM,UACN8D,QAAQ,GAAD,OAAK1H,EAAL,aAAkBqH,EAAlB,kCAIfI,EAAmB,CACf7D,KAAM,QACN8D,QAAS,2CA+FL,sB,wBCxJL,SAASiB,GAAT,GAAiE,IAAhDpJ,EAA+C,EAA/CA,eAAgBqJ,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,cAC1D,EAAwBhH,oBAAS,GAAjC,mBAAOqD,EAAP,KAAa4D,EAAb,KACA,EAAoCjH,oBAAS,GAA7C,mBAAOkH,EAAP,KAAmBC,EAAnB,KAEMC,EAAkB1G,mBAClB2G,EAAa,uCAAG,sBAAAxK,EAAA,sEACZa,IADY,2CAAH,qDAcnB,OAVAyD,qBAAU,WACF4F,GACAE,GAAQ,KAEb,CAACF,IAEJ5F,qBAAU,WACN6F,MACD,CAACA,IAGA,cAAC,IAAWhE,KAAZ,CAAiBC,KAAMI,EAAMH,GAAIC,WAAjC,SACI,cAAC,IAAD,CACID,GAAG,MACHE,QAAM,EACN7G,UAAU,qCACV+K,aAAcF,EACd/D,KAAMA,EACNC,QAAS2D,EANb,SAQI,sBAAK1K,UAAU,yFAAf,UACI,cAAC,IAAWgH,MAAZ,CACIL,GAAIC,WACJK,MAAM,wBACNC,UAAU,YACVC,QAAQ,cACRC,MAAM,uBACNC,UAAU,cACVC,QAAQ,YAPZ,SASI,cAAC,IAAOC,QAAR,CAAgBvH,UAAU,iEAI9B,sBACIA,UAAU,qDACVC,cAAY,OAFhB,oBAMA,cAAC,IAAW+G,MAAZ,CACIL,GAAIC,WACJK,MAAM,wBACNC,UAAU,uDACVC,QAAQ,yCACRC,MAAM,uBACNC,UAAU,yCACVC,QAAQ,uDAPZ,SASI,sBAAKtH,UAAU,2JAAf,UACI,qBAAKA,UAAU,yCAAf,SACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,mHAAf,SACI,cAAC,IAAD,CACIA,UAAU,uBACVC,cAAY,WAGpB,sBAAKD,UAAU,gDAAf,UACI,cAAC,IAAOgL,MAAR,CACIrE,GAAG,KACH3G,UAAU,8CAFd,6BAMA,qBAAKA,UAAU,OAAf,SACI,mBAAGA,UAAU,wBAAb,sEAQhB,sBAAKA,UAAU,2DAAf,UACI,wBACIwF,KAAK,SACLqE,MAAO,CACHC,gBAAiBa,GAAc,OAC/BM,QAASN,GAAc,OAE3B3K,UAAU,8PACVmF,QAAS,WACLyF,GAAc,GACdE,KATR,SAYKH,EAAa,WAAa,WAE/B,wBACInF,KAAK,SACLxF,UAAU,4QACVmF,QAAS,kBAAMuF,GAAQ,IACvBQ,IAAKL,EAJT,mCCnFhC,SAAS1I,KAAwB,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAC5B,OAAOA,EAAQC,OAAOC,SAASC,KAAK,KAGzB,SAAS4I,KACpB,IAAM5H,EAAUC,cACRxC,EAAOoK,cAAPpK,GACR,EAAkCyC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAAS,CACrCvD,KAAM,GACNmL,KAAM,GACN5J,QAAS,GACT6J,MAAO,GACPrC,OAAQ,GACRS,MAAO,GACPlE,KAAM,GACN7D,YAAa,GACb4J,YAAa,GACbC,QAAS,GACTjG,QAAQ,EACRkG,UAAU,IAZd,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,EAAgClI,mBAAS,IAAzC,mBAAOmI,EAAP,KAAiBC,EAAjB,KACA,EAAkCpI,mBAAS,IAA3C,mBAAO+E,EAAP,KAAkBsD,EAAlB,KACA,EAAoCrI,mBAAS,IAA7C,mBAAOgF,EAAP,KAAmBsD,EAAnB,KACA,EAAqCtI,oBAAS,GAA9C,mBAAOuI,EAAP,KAAoBpB,EAApB,KACA,EAAgCnH,mBAAS,IAAzC,mBAAOwI,EAAP,KAAiBC,EAAjB,KACA,EAAwCzI,mBAAS,CAC7C+B,KAAM,GACN8D,QAAS,KAFb,mBAAO6C,EAAP,KAAqBrD,EAArB,KAIA,EAAwCrF,oBAAS,GAAjD,mBAAO2I,GAAP,KAAqBrD,GAArB,KACA,GAAsCtF,mBAAS,IAA/C,qBAAOiF,GAAP,MAAoBC,GAApB,MACA,GAAwClF,oBAAS,GAAjD,qBAAO+G,GAAP,MAAqB6B,GAArB,MACA,GAAkC5I,oBAAS,GAA3C,qBAAO6I,GAAP,MAAkBC,GAAlB,MAGA3H,qBAAU,WACN,sBAAC,kCAAAtE,EAAA,sEAE6BuB,IAF7B,cAES2K,EAFT,OAGGX,EAAYW,GAHf,SAM2BlL,IAN3B,UAMSmL,EANT,OAOG9I,EAAa8I,IAITzL,EAXP,kCAYyBD,EAAYC,GAZrC,WAYaP,EAZb,OAcOkL,EAAY,CACRzL,KAAMO,EAAIP,KACVmL,KAAM5K,EAAIiM,YACVjL,QAAShB,EAAIkM,SACbpH,OAAQ9E,EAAI8E,OACZ+F,MAAO7K,EAAI6K,MACX9F,KAAM/E,EAAI+E,KACVkE,MAAOjJ,EAAIiJ,MACXT,OAAQxI,EAAIwI,OACZtH,YAAalB,EAAImM,aACjBrB,YAAa9K,EAAIoM,aACjBpB,SAAUhL,EAAIqM,UACdtB,QAAS/K,EAAI+K,UAIA,YAAb/K,EAAI+E,KA9Bf,wBA+BW+G,IAAa,GA/BxB,UAgCqC7K,EAAYjB,EAAImM,cAhCrD,QAgCiBG,EAhCjB,OAiCWhB,EAAcgB,GAjCzB,QAoCOpE,GAAelI,EAAI+K,SAEnBe,IAAa,GAtCpB,2CAAD,KAyCD,CAACvL,IAGJ4D,qBAAU,WACN,sBAAC,4BAAAtE,EAAA,6DACGqI,GAAe,IADlB,SAG8B1G,EAAayJ,EAASJ,OAHpD,OAGS0B,EAHT,OAIGlB,EAAakB,GAJhB,0CAAD,KAMD,CAACtB,EAASJ,QAGb1G,qBAAU,WACN,IAAMqI,EAAO,GAEb,IAAK,IAAMrE,KAAcF,GACrBuE,EAAKxH,KACD,cAAC8C,GAAD,CAEIE,WAAYA,EACZD,UAAWA,EACXE,YAAaA,GACbC,eAAgBA,GAChBC,WAAYA,EACZC,aAAcH,GAAYE,GAC1BG,gBAAiBA,GACjBD,gBAAiBA,GATrB,UACYF,EADZ,YAC0BF,GAAYE,MAa9CsD,EAAY,GAAD,OACJe,EADI,CAEP,cAAC1E,GAAD,CAEIE,WAAYA,EACZD,UAAWA,EACXE,YAAaA,GACbC,eAAgBA,GAChBC,WAAW,GACXC,aAAa,GACbE,gBAAiBA,GACjBD,gBAAiBA,GARZ,UAad,CAACJ,KAGJ9D,qBAAU,WACNsH,EAAY,CACR,cAAC3D,GAAD,CAEIE,WAAYA,EACZD,UAAWA,EACXE,YAAaA,GACbC,eAAgBA,GAChBC,WAAW,GACXC,aAAa,GACbE,gBAAiBA,GACjBD,gBAAiBA,GARZ,SAad,CAACL,EAAYD,IAGhB,IAuDM0E,GAAM,uCAAG,WAAOpI,GAAP,SAAAxE,EAAA,yDACXwE,EAAEqI,mBAvDGzB,EAASxL,KASFwL,EAASJ,MASTI,EAASjK,QASQ,YAAlBiK,EAASlG,MAAuBkG,EAASzC,OAU9B,YAAlByC,EAASlG,MAC2B,IAApCyE,OAAOC,KAAKxB,IAAa/D,SAEzB0E,GAAmB,CACf7D,KAAM,QACN8D,QAAS,oCAGbsB,GAAc,GAEP,IAnBPvB,GAAmB,CACf7D,KAAM,QACN8D,QAAS,oCAGbsB,GAAc,GAEP,IAhBPvB,GAAmB,CACf7D,KAAM,QACN8D,QAAS,oCAGbsB,GAAc,GAEP,IAhBPvB,GAAmB,CACf7D,KAAM,QACN8D,QAAS,mCAGbsB,GAAc,GAEP,IAhBPvB,GAAmB,CACf7D,KAAM,QACN8D,QAAS,kCAGbsB,GAAc,GAEP,IA8CA,qBAOH5J,EAPG,gCAQGC,EAAeD,EAAD,aAAC,gBAAS0K,GAAV,IAAoBF,QAAS9C,MAR9C,6CAUG7H,EAAe,6BAAK6K,GAAN,IAAgBF,QAAS9C,MAV1C,OAaPnF,EAAQkC,KAAK,KAbN,4CAAH,sDAkBN2H,GAAsB,SAACC,EAAOC,GACjB,cAAXA,GAIJvE,IAAgB,IAIdwE,GAAe,SAACzI,GAClB6G,EAAY,6BAAKD,GAAN,kBAAiB5G,EAAEqD,OAAOjI,KAAO4E,EAAEqD,OAAOnD,OAAS,OAI5DwI,GAAoB,uCAAG,WAAO1I,GAAP,iBAAAxE,EAAA,yDAEzB4L,EAAY,IAEZvD,GAAe,KAEX7D,EAAEqD,OAAOnD,MANY,iCAOKxD,EAAkBsD,EAAEqD,OAAOnD,OAPhC,UAOfyI,EAPe,OASrB9B,EAAY,6BACLD,GADI,IAEPlG,KAAMiI,EAAYjI,KAClBkE,MAAO+D,EAAY/D,MACnB/H,YAAa8L,EAAY9L,YACzBsH,OAAQ,GACRxH,QAASqD,EAAEqD,OAAOnD,SAIG,YAArByI,EAAYjI,KAnBK,wBAoBjB+G,IAAa,GApBI,UAqBS7K,EAAY+L,EAAY9L,aArBjC,QAqBXoL,EArBW,OAsBjBhB,EAAcgB,GACdR,IAAa,GAvBI,gCA0BrBZ,EAAY,6BACLD,GADI,IAEPlG,KAAM,GACNkE,MAAO,GACP/H,YAAa,GACbsH,OAAQ,GACRxH,QAAS,MAhCQ,4CAAH,sDAsCpB4H,GAAqB,SAAC,GAAuB,IAArB7D,EAAoB,EAApBA,KAAM8D,EAAc,EAAdA,QAChCP,IAAgB,GAChBD,EAAgB,CACZtD,OACA8D,aAwBFoE,GAAY,uCAAG,sBAAApN,EAAA,sEACXa,EAAeH,GADJ,OAEjBuC,EAAQkC,KAAK,KAFI,2CAAH,qDAUdvF,GAWAwL,EAXAxL,KACAmL,GAUAK,EAVAL,KACA5J,GASAiK,EATAjK,QACA6J,GAQAI,EARAJ,MACArC,GAOAyC,EAPAzC,OACA1D,GAMAmG,EANAnG,OACAC,GAKAkG,EALAlG,KACAkE,GAIAgC,EAJAhC,MACA/H,GAGA+J,EAHA/J,YACA4J,GAEAG,EAFAH,YACAE,GACAC,EADAD,SAGJ,OACI,sBAAKzL,UAAU,MAAf,UACI,qBAAKA,UAAU,kBAAkBC,cAAY,OAA7C,SACI,qBAAKD,UAAU,WAInB,qBAAKA,UAAU,gBAAf,SACI,qBAAKA,UAAU,kCAAf,SACI,qBAAKA,UAAU,mBAAf,SACI,sBAAM2N,SAAUT,GAAhB,SACI,sBAAKlN,UAAU,uCAAf,UACI,sBAAKA,UAAU,4BAAf,UACI,qBAAKA,UAAU,0BAAf,SACI,sBAAKA,UAAU,gCAAf,UACI,uBACIgI,QAAQ,OACRhI,UAAU,0CAFd,mCAMA,uBACIwF,KAAK,OACLtF,KAAK,OACLc,GAAG,OACHiH,YAAY,gBACZjI,UAAU,kHACVgF,MAAO9E,GACPgI,SAAUqF,UAItB,qBAAKvN,UAAU,yBAAf,SAEI,sBAAKA,UAAU,gCAAf,UACI,uBACIgI,QAAQ,SACRhI,UAAU,0CAFd,6BAMA,yBACIgB,GAAG,SACHd,KAAK,QACL8E,MAAOsG,GACPtL,UAAU,+JACVkI,SAAUqF,GALd,UAOI,wBAAQvI,MAAM,GAAd,6BAGC4G,EAAS3G,KACN,SAAC2I,EAASnE,GACN,OACI,wBACIzE,MACI4I,EAAQ1L,WAFhB,SAOQ0L,EAAQ1L,YAHPuH,cAYjC,qBAAKzJ,UAAU,yBAAf,SAEI,sBAAKA,UAAU,gCAAf,UACI,uBACIgI,QAAQ,UACRhI,UAAU,0CAFd,8BAMA,yBACIgB,GAAG,UACHd,KAAK,UACL8E,MAAOvD,GACPzB,UAAU,+JACVkI,SAAU,SAACpD,GACP0I,GAAqB1I,GACrByI,GAAazI,IAPrB,UAUI,wBAAQE,MAAM,GAAd,4BAGCtB,EAAUuB,KACP,SAACnF,EAAU2J,GACP,OACI,wBACIzE,MACIlF,EAASM,IAFjB,SAMKN,EAAS4J,OAFLD,cAWhC6B,IAAS7J,GACN,qCACI,sBAAKzB,UAAU,uDAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,uBACIgI,QAAQ,cACRhI,UAAU,0CAFd,yCAOA,uBACIwF,KAAK,OACLtF,KAAK,cACLc,GAAG,cACHhB,UAAU,kHACVgF,MACIrD,IAEI,cADJA,GADA,UAGS+H,GAHT,aAGmBlE,GAHnB,oBAGmC7D,GAHnC,eAIS+H,GAJT,kBAIwBlE,GAJxB,KAMJ+D,UAAQ,OAId5H,IACc,cAAhBA,GA6CI,KA5CA,sBAAK3B,UAAU,gBAAf,UAGI,uBACIgI,QAAQ,UACRhI,UAAU,0CAFd,8BAMA,yBACIgB,GAAG,UACHd,KAAK,SACL8E,MAAOiE,GACPjJ,UAAU,+JACVkI,SACIqF,GANR,UASI,wBAAQvI,MAAM,GAAd,8BAGCwD,EAAUvD,KACP,SACI0E,EACAF,GAEA,OACI,wBACIzE,MACI2E,EAASC,YAFjB,SASQD,EAASC,aAJTH,eAenC9H,IACe,cAAhBA,GACK2K,GAKG,cAACzH,EAAA,EAAD,CACIgF,MAAO,CACHgE,UAAW,MANnB,qBAAK7N,UAAU,WAAf,SACKiM,IAST,KACJ,qBAAKjM,UAAU,yBAAf,SACI,sBAAKA,UAAU,gCAAf,UACI,uBACIgI,QAAQ,eACRhI,UAAU,0CAFd,0BAMA,uBACIwF,KAAK,OACLtF,KAAK,cACLc,GAAG,eACHiH,YAAY,wBACZjI,UAAU,kHACVgF,MAAOuG,GACPrD,SAAUqF,aAK1B,KACJ,qBAAKvN,UAAU,yBAAf,SACI,sBAAKA,UAAU,gCAAf,UACI,uBACIgI,QAAQ,cACRhI,UAAU,0CAFd,yBAMA,qBAAKA,UAAU,OAAf,SACI,0BACIgB,GAAG,cACHd,KAAK,OACL4N,KAAM,EACN9N,UAAU,6GACViI,YAAY,uBACZjD,MAAOqG,GACPnD,SAAUqF,YAK1B,qBAAKvN,UAAU,gCAAf,SACI,eAAC,IAAO+N,MAAR,CACIpH,GAAG,MACH3G,UAAU,oBAFd,UAII,eAAC,IAAD,CACIgO,QAASzI,GACT2C,SAzRb,SAACpD,GAC5B6G,EAAY,6BAAKD,GAAN,IAAgBnG,OAAQT,KAEnCuE,GAAmB,CACf7D,KAAM,UACN8D,QAASxE,EAAI,qBAAuB,yBAuRA9E,UAAWmC,GACPoD,GACM,gBACA,cACN,4NATR,UAYI,sBAAMvF,UAAU,UAAhB,yBAGA,sBACIC,cAAY,OACZD,UAAWmC,GACPoD,GACM,gBACA,gBACN,mIAIZ,cAAC,IAAO0I,MAAR,CACItH,GAAG,OACH3G,UAAU,OAFd,SAII,sBAAMA,UAAU,oCAAhB,SACKuF,GACK,oBACA,6BAKtB,qBAAKvF,UAAU,gCAAf,SACI,eAAC,IAAO+N,MAAR,CACIpH,GAAG,MACH3G,UAAU,oBAFd,UAII,eAAC,IAAD,CACIgO,QAASvC,GACTvD,SA9UZ,SAACpD,GAC7B6G,EAAY,6BAAKD,GAAN,IAAgBD,SAAU3G,KAErCuE,GAAmB,CACf7D,KAAM,UACN8D,QAASxE,EACH,oCACA,wCA0U8B9E,UAAWmC,GACPsJ,GACM,gBACA,cACN,4NATR,UAYI,sBAAMzL,UAAU,UAAhB,yBAGA,sBACIC,cAAY,OACZD,UAAWmC,GACPsJ,GACM,gBACA,gBACN,mIAIZ,cAAC,IAAOwC,MAAR,CACItH,GAAG,OACH3G,UAAU,OAFd,SAII,sBAAMA,UAAU,oCAAhB,SACKyL,GACK,oCACA,8CAO1B,sBAAKzL,UAAU,0CAAf,UACI,wBACIwF,KAAK,SACLL,QAAS,kBAAM5B,EAAQkC,KAAK,MAC5BzF,UAAU,0NAHd,oBAQCgB,GACG,wBACIwE,KAAK,SACLL,QAAS,kBACLkH,IAAgB,IAEpBxC,MAAO,CACHC,gBACIkC,GAAe,QAEvBhM,UAAU,4NATd,kCAcJ,wBACIwF,KAAK,SACLL,QAAS,kBAAMyF,GAAc,IAC7Bf,MAAO,CACHC,gBACIkC,GAAe,QAEvBhM,UAAU,yNAPd,SASKgM,EACK,YACA,qCAQlC,cAACkC,GAAA,EAAD,CACIpH,KAAMsF,GACN+B,iBAAkB,IAClBpH,QAASqG,GACTgB,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAJjD,SAMI,cAACC,GAAA,EAAD,CACIxH,QAASqG,GACToB,SAAUrC,EAAa3G,KAF3B,SAIK2G,EAAa7C,YAGtB,cAAC,GAAD,CACInI,eAAgBuM,GAChBlD,aAAcA,GACdC,cArZU,WAClB4B,IAAgB,SCnUT,SAASoC,KACpB,IAAMlL,EAAUC,cACRxC,EAAOoK,cAAPpK,GAER,EAAuByC,mBAAS,IAAvBiL,EAAT,oBACA,EAAwBjL,mBAAS,CAC7BvD,KAAM,GACNmL,KAAM,GACN5J,QAAS,GACTkN,MAAO,GACPpJ,QAAQ,IALHoG,EAAT,oBAkCA,OA1BA/G,qBAAU,WACN,sBAAC,4BAAAtE,EAAA,sEACqBgB,IADrB,OACSb,EADT,OAEGiO,EAAWjO,GAFd,0CAAD,KAID,IAEHmE,qBAAU,WACN,sBAAC,4BAAAtE,EAAA,mEAEWU,EAFX,gCAG6BD,EAAYC,GAHzC,OAGiBP,EAHjB,OAIWkL,EAAY,CACRzL,KAAMO,EAAIP,KACVmL,KAAM5K,EAAI4K,KACV5J,QAAShB,EAAIkM,SACbgC,MAAOlO,EAAImO,UACXrJ,OAAQ9E,EAAI8E,SAT3B,uDAaOhC,EAAQkC,KAAK,QAbpB,wDAAD,KAgBD,CAAClC,EAASvC,IAEN,qBAAKhB,UAAU,OAAf,oCCvCI,SAAS6O,KACpB,IAAQ7N,EAAOoK,cAAPpK,GAER,EAAgCyC,mBAAS,IAAzC,mBAAOqL,EAAP,KAAiBC,EAAjB,KAYA,OAVAnK,qBAAU,WACN,sBAAC,4BAAAtE,EAAA,0DACOU,EADP,gCAEyBK,EAAgBL,GAFzC,OAEaP,EAFb,OAGOsO,EAAYtO,GAHnB,0CAAD,KAOD,IAGC,qBAAKT,UAAU,gBAAf,SACI,qBAAKA,UAAU,0CAAf,SACI,qBAAKA,UAAU,4DAAf,SACI,qBAAKA,UAAU,gEAAf,SACI,wBAAOA,UAAU,sCAAjB,UACI,uBAAOA,UAAU,aAAjB,SACI,+BACI,oBACIgP,MAAM,MACNhP,UAAU,iFAFd,yBAMA,oBACIgP,MAAM,MACNhP,UAAU,iFAFd,2BAMA,oBACIgP,MAAM,MACNhP,UAAU,iFAFd,2BAMA,oBACIgP,MAAM,MACNhP,UAAU,iFAFd,8BAMA,oBACIgP,MAAM,MACNhP,UAAU,qBAFd,SAII,sBAAMA,UAAU,UAAhB,yBAIZ,uBAAOA,UAAU,oCAAjB,SACK8O,EAAS7J,KAAI,SAACgK,EAAMC,GAAP,OACV,+BACI,oBAAIlP,UAAU,gEAAd,SACKiP,EAAKE,cAEV,oBAAInP,UAAU,oDAAd,SACKiP,EAAKG,cAEV,oBAAIpP,UAAU,oDAAd,SACK,IAAIqP,KACDJ,EAAKK,oBACPC,eAAe,QAAS,CACtBC,SAAU,UAGlB,oBAAIxP,UAAU,oDAAd,SACKiP,EAAKQ,qBAEV,oBAAIzP,UAAU,iEAjBTkP,mBC3D9B,SAASQ,GAAT,GAA+C,IAAxBlE,EAAuB,EAAvBA,QAAS5C,EAAc,EAAdA,WAC3C,OACI,mCAEI,qBAAK5I,UAAU,uDAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,uBACIgI,QAAQ,cACRhI,UAAU,0CAFd,mDAMA,uBACIwF,KAAK,OACLtF,KAAK,cACLc,GAAG,cACHhB,UAAU,kHACVgF,MAAK,UAAK4D,EAAL,cAAqB4C,GAC1BjC,UAAQ,WCdjB,SAASkF,KACpB,IAAMlL,EAAUC,cACRxC,EAAOoK,cAAPpK,GAER,EAAuByC,mBAAS,IAAvBiL,EAAT,oBAEA,EAAgCjL,mBAAS,CACrCvD,KAAM,GACNmL,KAAM,GACN5J,QAAS,GACTkN,MAAO,GACP1F,OAAQ,GACRS,MAAO,GACPlE,KAAM,GACN7D,YAAa,GACb4J,YAAa,GACbC,QAAS,GACTjG,QAAQ,EACRkG,UAAU,IAZd,mBAAOC,EAAP,KAAiBC,EAAjB,KAeA/G,qBAAU,WACN,sBAAC,4BAAAtE,EAAA,sEACqBgB,IADrB,OACSb,EADT,OAEGiO,EAAWjO,GAFd,0CAAD,KAID,IAGHmE,qBAAU,WAEN,sBAAC,4BAAAtE,EAAA,+EAEyBS,EAAYC,GAFrC,OAEaP,EAFb,OAIOkL,EAAY,CACRzL,KAAMO,EAAIP,KACVmL,KAAM5K,EAAIiM,YACVjL,QAAShB,EAAIkM,SACbpH,OAAQ9E,EAAI8E,OACZ+F,MAAO7K,EAAI6K,MACX9F,KAAM/E,EAAI+E,KACVkE,MAAOjJ,EAAIiJ,MACXT,OAAQxI,EAAIwI,OACZtH,YAAalB,EAAImM,aACjBrB,YAAa9K,EAAIoM,aACjBpB,SAAUhL,EAAIqM,UACdtB,QAAS/K,EAAI+K,UAhBxB,gDAmBOjI,EAAQkC,KAAK,QAnBpB,wDAAD,KAsBD,CAAClC,EAASvC,IAEb,IACId,EAQAwL,EARAxL,KACAqF,EAOAmG,EAPAnG,OACAC,EAMAkG,EANAlG,KACAkE,EAKAgC,EALAhC,MACA/H,EAIA+J,EAJA/J,YACA4J,EAGAG,EAHAH,YACAE,EAEAC,EAFAD,SACAD,EACAE,EADAF,QAGJ,OACI,sBAAKxL,UAAU,MAAf,UACI,qBAAKA,UAAU,kBAAkBC,cAAY,OAA7C,SACI,qBAAKD,UAAU,WAEnB,qBAAKA,UAAU,gBAAf,SACI,qBAAKA,UAAU,kCAAf,SACI,qBAAKA,UAAU,mBAAf,SACI,+BACI,qBAAKA,UAAU,uCAAf,SACI,sBAAKA,UAAU,4BAAf,UACI,sBAAKA,UAAU,0BAAf,UACI,sBAAKA,UAAU,gCAAf,UACI,uBACIgI,QAAQ,gBACRhI,UAAU,0CAFd,kCAMA,uBACIuJ,UAAQ,EACR/D,KAAK,OACLtF,KAAK,OACLc,GAAG,OACHiH,YAAY,SACZjI,UAAU,kHACVgF,MAAO9E,OAGf,qBAAKF,UAAU,sCAAf,SACI,oBAAIA,UAAU,0EAAd,SACI,wBACIwF,KAAK,SACLxF,UAAU,0NACVmF,QAAS,kBACL5B,EAAQkC,KAAR,qBACkBzE,KAL1B,8BAcZ,qCACI,sBAAKhB,UAAU,uDAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,uBACIgI,QAAQ,cACRhI,UAAU,0CAFd,yCAMA,uBACIwF,KAAK,OACLtF,KAAK,cACLc,GAAG,cACHhB,UAAU,kHACVgF,MACIrD,GAEI,cADJA,EADA,UAGS+H,EAHT,aAGmBlE,EAHnB,oBAGmC7D,EAHnC,eAIS+H,EAJT,kBAIwBlE,EAJxB,KAMJ+D,UAAQ,OAGhB,2BAIHiC,EACKvB,OAAOC,KACHsB,GACFvG,KAAI,SAACoF,EAAK6E,GAAN,OACF,cAACQ,GAAD,CAEIlE,QAASA,EAAQnB,GACjBzB,WAAYyB,GAFP6E,MAKb,KACN,qBAAKlP,UAAU,yBAAf,SACI,sBAAKA,UAAU,gCAAf,UACI,uBACIgI,QAAQ,eACRhI,UAAU,0CAFd,0BAMA,uBACIwF,KAAK,OACLtF,KAAK,cACLc,GAAG,eACHiH,YAAY,GACZjI,UAAU,kHACVgF,MAAOuG,EACPhC,UAAQ,YAKxB,qBAAKvJ,UAAU,0BAAf,SACI,sBAAKA,UAAU,gCAAf,UACI,uBACIgI,QAAQ,gBACRhI,UAAU,0CAFd,+BAMA,uBACIuJ,UAAQ,EACR/D,KAAK,OACLtF,KAAK,QACLc,GAAG,QACHiH,YAAY,YACZjI,UAAU,kHACVgF,MAAOO,SAInB,qBAAKvF,UAAU,0BAAf,SACI,sBAAKA,UAAU,gCAAf,UACI,uBACIgI,QAAQ,gBACRhI,UAAU,0CAFd,8CAMA,uBACIuJ,UAAQ,EACR/D,KAAK,OACLtF,KAAK,QACLc,GAAG,QACHiH,YAAY,YACZjI,UAAU,kHACVgF,MAAOyG,sBAU3C,qBAAKzL,UAAU,kBAAkBC,cAAY,OAA7C,SACI,qBAAKD,UAAU,WAEnB,qBAAKA,UAAU,gBAAf,SACI,qBAAKA,UAAU,kCAAf,SACI,qBAAKA,UAAU,mBAAf,SACI,cAAC6O,GAAD,aCnMTc,OAxBf,WACI,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC1J,EAAD,CAAUE,KAAK,WAEnB,cAAC,IAAD,CAAOuJ,OAAK,EAACC,KAAK,UAAlB,SACI,cAAC1J,EAAD,CAAUC,SAAU,cAAC,GAAD,QAExB,cAAC,IAAD,CAAOwJ,OAAK,EAACC,KAAK,iBAAlB,SACI,cAAC1J,EAAD,CAAUC,SAAU,cAAC,GAAD,QAExB,cAAC,IAAD,CAAOwJ,OAAK,EAACC,KAAK,eAAlB,SACI,cAAC1J,EAAD,CAAUC,SAAU,cAAC,GAAD,QAExB,cAAC,IAAD,CAAOwJ,OAAK,EAACC,KAAK,OAAlB,SACI,cAAC1J,EAAD,CAAUC,SAAU,cAAC,GAAD,cCnBxC0J,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.71a4d6d6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/agilitek.92c88b12.svg\";","import React from \"react\"\nimport { CashIcon, ChevronRightIcon } from \"@heroicons/react/solid\"\n\nconst WorkflowItem = ({ workflow }) => {\n  return (\n    <a\n      href={workflow.href}\n      className=\"block px-4 py-4 bg-white hover:bg-gray-50\"\n    >\n      <span className=\"flex items-center space-x-4\">\n        <span className=\"flex-1 flex space-x-2 truncate\">\n          <CashIcon\n            className=\"flex-shrink-0 h-5 w-5 text-gray-400\"\n            aria-hidden=\"true\"\n          />\n          <span className=\"flex flex-col text-gray-500 text-sm truncate\">\n            <span className=\"truncate\">{workflow.name}</span>\n            <span>\n              <span className=\"text-gray-900 font-medium\">\n                {workflow.Frequency}\n              </span>\n            </span>\n            {/* <time dateTime={workflows.datetime}>{workflows.date}</time> */}\n          </span>\n        </span>\n        <ChevronRightIcon\n          className=\"flex-shrink-0 h-5 w-5 text-gray-400\"\n          aria-hidden=\"true\"\n        />\n      </span>\n    </a>\n  )\n}\n\nexport default WorkflowItem\n","import axios from 'axios';\nconst url = 'https://jzqdyrxgy2.execute-api.us-east-1.amazonaws.com/prod';\n\n//////////////////////////////////// WORKFLOW ////////////////////////////////////\n// Dashboard: Get all user workflows\nexport async function getAllWorkflows() {\n    try {\n        const res = await axios.get(`${url}/myworkflows`);\n        return res.data;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n// Create a Workflow\nexport async function createWorkflow(data) {\n    try {\n        const res = await axios.post(`${url}/myworkflows`, data);\n        return res.data;\n    } catch (err) {\n        console.log(err);\n    }\n}\n// Dashboard: Get user workflow by id\nexport async function getWorkflow(id) {\n    try {\n        const res = await axios.get(`${url}/myworkflows/${id}`);\n        return res.data;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n// Update Workflow\nexport async function updateWorkflow(id, data) {\n    try {\n        const res = await axios.put(`${url}/myworkflows/${id}`, data);\n        return res.data;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n// Delete a Workflow\nexport async function deleteWorkflow(id) {\n    try {\n        const res = await axios.delete(`${url}/myworkflows/${id}`);\n        return res.data;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n//Get workflow logs\nexport async function getWorkflowLogs(id) {\n    try {\n        const res = await axios.get(`${url}/myworkflows/logs/${id}`);\n        return res.data;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n//////////////////////////////////// Salesforce ////////////////////////////////////\n\n// UseEffect/PageLoad add new workflow: Request for input list of specific flow\nexport async function getSalesForceFlow() {\n    try {\n        const res = await axios.get(`${url}/salesforceflows`);\n        return res.data.actions;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n// Get flow inputs\nexport async function getWorkflowInputs(flowUrl) {\n    try {\n        const res = await axios.get(\n            `${url}/salesforceflows/flow?flowUrl=${flowUrl}`\n        );\n\n        return res.data;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n// Get Salesforce sObject type metadata\nexport async function getMetadata(sObjectType) {\n    try {\n        const res = await axios.get(\n            `${url}/salesforceflows/metadata?sObjectType=${sObjectType}`\n        );\n\n        return res.data.metadata;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n//////////////////////////////////// Database ////////////////////////////////////\n\n// Get database tables\nexport async function getDBTables() {\n    try {\n        const res = await axios.get(`${url}/database`);\n\n        return JSON.parse(res.data.body);\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n// Get database columns by table_name\nexport async function getDBColumns(table_name) {\n    try {\n        const res = await axios.get(`${url}/database/${table_name}/columns`);\n\n        return res.data;\n    } catch (err) {\n        console.log(err);\n    }\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport WorkflowItem from '../WorkflowItem/WorkflowItem';\nimport { useHistory, Link } from 'react-router-dom';\nimport { getAllWorkflows } from '../../api/network';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ');\n}\n\nconst statusStyles = {\n    true: 'bg-green-100 text-green-800',\n    false: 'bg-red-100 text-red-800',\n    failed: 'bg-gray-100 text-gray-800',\n};\n\nconst useStyles = makeStyles((theme) => ({\n    loading: {\n        height: '50vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n}));\n\nconst WorkflowTable = (search) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    const [workflows, setWorkflows] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [limit] = useState(5);\n    const [offset, setOffset] = useState(0);\n    const [resData, setResData] = useState([]);\n    const fetchWorkflows = useRef(() => {});\n\n    fetchWorkflows.current = async () => {\n        (async () => {\n            const res = await getAllWorkflows();\n            setResData(res);\n            const data = res.slice(offset, offset + limit);\n            setWorkflows(data);\n            setTimeout(() => setLoading(false), 1000);\n        })();\n    };\n\n    const handlePrevClicked = async () => {\n        setOffset(Math.max(0, offset - 5));\n    };\n\n    const handleNextClicked = async () => {\n        if (resData.length > offset + limit) {\n            setOffset(offset + 5);\n        }\n    };\n\n    // fetch User Data\n    useEffect(() => {\n        fetchWorkflows.current();\n    }, []);\n\n    useEffect(() => {\n        fetchWorkflows.current();\n    }, [offset]);\n\n    return (\n        <>\n            {loading ? (\n                <div className={classes.loading}>\n                    <h2 className=\"mb-4\">Loading...</h2>\n                    <CircularProgress />\n                </div>\n            ) : (\n                <div className=\"mt-8\">\n                    <h2 className=\"max-w-6xl mx-auto mt-8 px-4 text-lg leading-6 font-medium text-gray-900 sm:px-6 lg:px-8\">\n                        Workflows\n                    </h2>\n\n                    {/* Activity list (smallest breakpoint only) */}\n                    <div className=\"shadow sm:hidden\">\n                        <ul className=\"mt-2 divide-y divide-gray-200 overflow-hidden shadow sm:hidden\">\n                            {workflows\n                                .filter((e) => {\n                                    if (e.name.includes(search.value.search)) {\n                                        return e;\n                                    }\n\n                                    return '';\n                                })\n                                .map((e) => (\n                                    <li key={e.id}>\n                                        <WorkflowItem workflow={e} />\n                                    </li>\n                                ))}\n                        </ul>\n\n                        <nav\n                            className=\"bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200\"\n                            aria-label=\"Pagination\"\n                        >\n                            <div className=\"flex-1 flex justify-between\">\n                                <button\n                                    onClick={handlePrevClicked}\n                                    className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:text-gray-500\"\n                                >\n                                    Previous\n                                </button>\n                                <button\n                                    onClick={handleNextClicked}\n                                    className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:text-gray-500\"\n                                >\n                                    Next\n                                </button>\n                            </div>\n                        </nav>\n                    </div>\n\n                    {/* Activity table (small breakpoint and up) */}\n                    <div className=\"hidden sm:block\">\n                        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n                            <div className=\"flex flex-col mt-2\">\n                                <div className=\"align-middle min-w-full overflow-x-auto shadow overflow-hidden sm:rounded-lg\">\n                                    <table className=\"min-w-full divide-y divide-gray-200\">\n                                        <thead>\n                                            <tr>\n                                                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                                    Workflow\n                                                </th>\n                                                <th className=\"px-6 py-3 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                                    Frequency\n                                                </th>\n                                                <th className=\"hidden px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider md:block\">\n                                                    Status\n                                                </th>\n                                                <th className=\"px-6 py-3 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                                    Edit\n                                                </th>\n                                            </tr>\n                                        </thead>\n                                        <tbody className=\"bg-white divide-y divide-gray-200\">\n                                            {workflows\n                                                .filter((workflow) => {\n                                                    if (\n                                                        workflow.name\n                                                            .toLowerCase()\n                                                            .includes(\n                                                                search.value.search.toLowerCase()\n                                                            )\n                                                    ) {\n                                                        return workflow;\n                                                    }\n\n                                                    return '';\n                                                })\n                                                .map((workflow) => (\n                                                    <tr\n                                                        key={workflow.id}\n                                                        className=\"bg-white\"\n                                                    >\n                                                        <td className=\"max-w-0 w-full px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                                                            <div className=\"flex\">\n                                                                <p className=\"text-gray-500 truncate group-hover:text-gray-900\">\n                                                                    <Link\n                                                                        className=\"text-blue-500 truncate hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500\"\n                                                                        to={`/details/${workflow.id}`}\n                                                                    >\n                                                                        {\n                                                                            workflow.name\n                                                                        }\n                                                                    </Link>\n                                                                </p>\n                                                                {/* </a> */}\n                                                            </div>\n                                                        </td>\n                                                        <td className=\"px-6 py-4 text-right whitespace-nowrap text-sm text-gray-500\">\n                                                            <span className=\"text-gray-900 font-medium\">\n                                                                {\n                                                                    workflow.Frequency\n                                                                }\n                                                            </span>\n                                                            {workflow.currency}\n                                                        </td>\n                                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                                            <span\n                                                                className={classNames(\n                                                                    statusStyles[\n                                                                        workflow\n                                                                            .active\n                                                                    ],\n                                                                    'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium capitalize'\n                                                                )}\n                                                            >\n                                                                {workflow.active\n                                                                    ? 'Active'\n                                                                    : 'Inactive'}\n                                                            </span>\n                                                        </td>\n                                                        <td className=\"px-6 py-4 text-right whitespace-nowrap text-sm text-gray-500\">\n                                                            <button\n                                                                type=\"button\"\n                                                                className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                                                                onClick={() =>\n                                                                    history.push(\n                                                                        `/configure/${workflow.id}`\n                                                                    )\n                                                                }\n                                                            >\n                                                                Configure\n                                                            </button>\n                                                        </td>\n                                                    </tr>\n                                                ))}\n                                        </tbody>\n                                    </table>\n                                    {/* Pagination */}\n                                    <nav\n                                        className=\"bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6\"\n                                        aria-label=\"Pagination\"\n                                    >\n                                        <div className=\"hidden sm:block\">\n                                            <p className=\"text-sm text-gray-700\">\n                                                Showing{' '}\n                                                <span className=\"font-medium\">\n                                                    {offset + 1}\n                                                </span>{' '}\n                                                to{' '}\n                                                <span className=\"font-medium\">\n                                                    {offset + limit}\n                                                </span>{' '}\n                                                of{' '}\n                                                <span className=\"font-medium\">\n                                                    {resData.length}\n                                                </span>{' '}\n                                                results\n                                            </p>\n                                        </div>\n                                        <div className=\"flex-1 flex justify-between sm:justify-end\">\n                                            <button\n                                                onClick={handlePrevClicked}\n                                                className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 cursor-pointer\"\n                                            >\n                                                Previous\n                                            </button>\n                                            <button\n                                                onClick={handleNextClicked}\n                                                className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 cursor-pointer\"\n                                            >\n                                                Next\n                                            </button>\n                                        </div>\n                                    </nav>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default WorkflowTable;\n","import { Fragment, useState } from 'react';\nimport { Dialog, Menu, Transition } from '@headlessui/react';\nimport { useHistory } from 'react-router-dom';\nimport agilitek from '../../images/agilitek.svg';\nimport {\n    BellIcon,\n    ClockIcon,\n    CogIcon,\n    DocumentReportIcon,\n    HomeIcon,\n    MenuAlt1Icon,\n    QuestionMarkCircleIcon,\n    ShieldCheckIcon,\n    XIcon,\n} from '@heroicons/react/outline';\nimport {\n    CheckCircleIcon,\n    ChevronDownIcon,\n    OfficeBuildingIcon,\n    SearchIcon,\n} from '@heroicons/react/solid';\nimport WorkflowTable from '../WorkflowTable/WorkflowTable';\n\nconst navigation = [\n    { name: 'Home', href: '/', icon: HomeIcon, current: true },\n    { name: 'History', href: '/', icon: ClockIcon, current: false },\n    { name: 'Statistics', href: '/', icon: DocumentReportIcon, current: false },\n];\nconst secondaryNavigation = [\n    { name: 'Settings', href: '/', icon: CogIcon },\n    { name: 'Help', href: '/', icon: QuestionMarkCircleIcon },\n    { name: 'Privacy', href: '/', icon: ShieldCheckIcon },\n];\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ');\n}\n\nexport default function UserDash({ children, page }) {\n    const [search, setSearch] = useState('');\n    const [sidebarOpen, setSidebarOpen] = useState(false);\n    const history = useHistory();\n    return (\n        <div className=\"h-screen flex overflow-hidden bg-gray-100\">\n            <Transition.Root show={sidebarOpen} as={Fragment}>\n                <Dialog\n                    as=\"div\"\n                    static\n                    className=\"fixed inset-0 flex z-40 lg:hidden\"\n                    open={sidebarOpen}\n                    onClose={setSidebarOpen}\n                >\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"transition-opacity ease-linear duration-300\"\n                        enterFrom=\"opacity-0\"\n                        enterTo=\"opacity-100\"\n                        leave=\"transition-opacity ease-linear duration-300\"\n                        leaveFrom=\"opacity-100\"\n                        leaveTo=\"opacity-0\"\n                    >\n                        <Dialog.Overlay className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" />\n                    </Transition.Child>\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"transition ease-in-out duration-300 transform\"\n                        enterFrom=\"-translate-x-full\"\n                        enterTo=\"translate-x-0\"\n                        leave=\"transition ease-in-out duration-300 transform\"\n                        leaveFrom=\"translate-x-0\"\n                        leaveTo=\"-translate-x-full\"\n                    >\n                        <div className=\"relative flex-1 flex flex-col max-w-xs w-full pt-5 pb-4 bg-cyan-700\">\n                            <Transition.Child\n                                as={Fragment}\n                                enter=\"ease-in-out duration-300\"\n                                enterFrom=\"opacity-0\"\n                                enterTo=\"opacity-100\"\n                                leave=\"ease-in-out duration-300\"\n                                leaveFrom=\"opacity-100\"\n                                leaveTo=\"opacity-0\"\n                            >\n                                <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\n                                    <button\n                                        className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\"\n                                        onClick={() => setSidebarOpen(false)}\n                                    >\n                                        <span className=\"sr-only\">\n                                            Close sidebar\n                                        </span>\n                                        <XIcon\n                                            className=\"h-6 w-6 text-white\"\n                                            aria-hidden=\"true\"\n                                        />\n                                    </button>\n                                </div>\n                            </Transition.Child>\n                            <div className=\"flex-shrink-0 flex items-center px-4\">\n                                <img\n                                    className=\"h-8 w-auto\"\n                                    src=\"\"\n                                    alt=\"Agilitek\"\n                                />\n                            </div>\n                            <nav\n                                className=\"mt-5 flex-shrink-0 h-full divide-y divide-cyan-800 overflow-y-auto\"\n                                aria-label=\"Sidebar\"\n                            >\n                                <div className=\"px-2 space-y-1\">\n                                    {navigation.map((item) => (\n                                        <a\n                                            key={item.name}\n                                            href={item.href}\n                                            className={classNames(\n                                                item.current\n                                                    ? 'bg-cyan-800 text-white'\n                                                    : 'text-cyan-100 hover:text-white hover:bg-cyan-600',\n                                                'group flex items-center px-2 py-2 text-base font-medium rounded-md'\n                                            )}\n                                            aria-current={\n                                                item.current\n                                                    ? 'page'\n                                                    : undefined\n                                            }\n                                        >\n                                            <item.icon\n                                                className=\"mr-4 h-6 w-6 text-cyan-200\"\n                                                aria-hidden=\"true\"\n                                            />\n                                            {item.name}\n                                        </a>\n                                    ))}\n                                </div>\n                                <div className=\"mt-6 pt-6\">\n                                    <div className=\"px-2 space-y-1\">\n                                        {secondaryNavigation.map((item) => (\n                                            <a\n                                                key={item.name}\n                                                href={item.href}\n                                                className=\"group flex items-center px-2 py-2 text-base font-medium rounded-md text-cyan-100 hover:text-white hover:bg-cyan-600\"\n                                            >\n                                                <item.icon\n                                                    className=\"mr-4 h-6 w-6 text-cyan-200\"\n                                                    aria-hidden=\"true\"\n                                                />\n                                                {item.name}\n                                            </a>\n                                        ))}\n                                    </div>\n                                </div>\n                            </nav>\n                        </div>\n                    </Transition.Child>\n                    <div className=\"flex-shrink-0 w-14\" aria-hidden=\"true\">\n                        {/* Dummy element to force sidebar to shrink to fit close icon */}\n                    </div>\n                </Dialog>\n            </Transition.Root>\n\n            {/* Static sidebar for desktop */}\n            <div className=\"hidden lg:flex lg:flex-shrink-0\">\n                <div className=\"flex flex-col w-64\">\n                    {/* Sidebar component, swap this element with another sidebar if you like */}\n                    <div className=\"flex flex-col flex-grow bg-cyan-700 pt-5 pb-4 overflow-y-auto\">\n                        <div className=\"flex items-center flex-shrink-0 px-4\">\n                            {/* TODO: fix logo  */}\n                            <img\n                                className=\"h-8 w-30\"\n                                src={agilitek}\n                                alt=\"Agilitek Logo\"\n                            />\n                        </div>\n                        <nav\n                            className=\"mt-5 flex-1 flex flex-col divide-y divide-cyan-800 overflow-y-auto\"\n                            aria-label=\"Sidebar\"\n                        >\n                            <div className=\"px-2 space-y-1\">\n                                {navigation.map((item) => (\n                                    <a\n                                        key={item.name}\n                                        href={item.href}\n                                        className={classNames(\n                                            item.current\n                                                ? 'bg-cyan-800 text-white'\n                                                : 'text-cyan-100 hover:text-white hover:bg-cyan-600',\n                                            'group flex items-center px-2 py-2 text-sm leading-6 font-medium rounded-md'\n                                        )}\n                                        aria-current={\n                                            item.current ? 'page' : undefined\n                                        }\n                                    >\n                                        <item.icon\n                                            className=\"mr-4 h-6 w-6 text-cyan-200\"\n                                            aria-hidden=\"true\"\n                                        />\n                                        {item.name}\n                                    </a>\n                                ))}\n                            </div>\n                            <div className=\"mt-6 pt-6\">\n                                <div className=\"px-2 space-y-1\">\n                                    {secondaryNavigation.map((item) => (\n                                        <a\n                                            key={item.name}\n                                            href={item.href}\n                                            className=\"group flex items-center px-2 py-2 text-sm leading-6 font-medium rounded-md text-cyan-100 hover:text-white hover:bg-cyan-600\"\n                                        >\n                                            <item.icon\n                                                className=\"mr-4 h-6 w-6 text-cyan-200\"\n                                                aria-hidden=\"true\"\n                                            />\n                                            {item.name}\n                                        </a>\n                                    ))}\n                                </div>\n                            </div>\n                        </nav>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"flex-1 overflow-auto focus:outline-none\">\n                <div className=\"relative z-10 flex-shrink-0 flex h-16 bg-white border-b border-gray-200 lg:border-none\">\n                    <button\n                        className=\"px-4 border-r border-gray-200 text-gray-400 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-cyan-500 lg:hidden\"\n                        onClick={() => setSidebarOpen(true)}\n                    >\n                        <span className=\"sr-only\">Open sidebar</span>\n                        <MenuAlt1Icon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                    </button>\n                    {/* Search bar */}\n                    <div className=\"flex-1 px-4 flex justify-between sm:px-6 lg:max-w-6xl lg:mx-auto lg:px-8\">\n                        <div className=\"flex-1 flex\">\n                            <form\n                                className=\"w-full flex md:ml-0\"\n                                action=\"#\"\n                                method=\"GET\"\n                            >\n                                <label\n                                    htmlFor=\"search_field\"\n                                    className=\"sr-only\"\n                                >\n                                    Search\n                                </label>\n                                <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\n                                    <div\n                                        className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\"\n                                        aria-hidden=\"true\"\n                                    >\n                                        <SearchIcon\n                                            className=\"h-5 w-5\"\n                                            aria-hidden=\"true\"\n                                        />\n                                    </div>\n                                    <input\n                                        id=\"search_field\"\n                                        name=\"search_field\"\n                                        className=\"block w-full h-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-0 focus:border-transparent sm:text-sm\"\n                                        placeholder=\"Search Workflows\"\n                                        onChange={(e) => {\n                                            setSearch(e.target.value);\n                                        }}\n                                        type=\"search\"\n                                    />\n                                </div>\n                            </form>\n                        </div>\n                        <div className=\"ml-4 flex items-center md:ml-6\">\n                            <button className=\"bg-white p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\">\n                                <span className=\"sr-only\">\n                                    View notifications\n                                </span>\n                                <BellIcon\n                                    className=\"h-6 w-6\"\n                                    aria-hidden=\"true\"\n                                />\n                            </button>\n\n                            {/* Profile dropdown */}\n                            <Menu as=\"div\" className=\"ml-3 relative\">\n                                {({ open }) => (\n                                    <>\n                                        <div>\n                                            <Menu.Button className=\"max-w-xs bg-white rounded-full flex items-center text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500 lg:p-2 lg:rounded-md lg:hover:bg-gray-50\">\n                                                <img\n                                                    className=\"h-8 w-8 rounded-full\"\n                                                    src=\"https://upload.wikimedia.org/wikipedia/en/thumb/5/5d/Vancouver_Whitecaps_FC_logo.svg/180px-Vancouver_Whitecaps_FC_logo.svg.png\"\n                                                    alt=\"\"\n                                                />\n                                                <span className=\"hidden ml-3 text-gray-700 text-sm font-medium lg:block\">\n                                                    <span className=\"sr-only\">\n                                                        Open user menu for{' '}\n                                                    </span>\n                                                    White Caps Association\n                                                </span>\n                                                <ChevronDownIcon\n                                                    className=\"hidden flex-shrink-0 ml-1 h-5 w-5 text-gray-400 lg:block\"\n                                                    aria-hidden=\"true\"\n                                                />\n                                            </Menu.Button>\n                                        </div>\n                                        <Transition\n                                            show={open}\n                                            as={Fragment}\n                                            enter=\"transition ease-out duration-100\"\n                                            enterFrom=\"transform opacity-0 scale-95\"\n                                            enterTo=\"transform opacity-100 scale-100\"\n                                            leave=\"transition ease-in duration-75\"\n                                            leaveFrom=\"transform opacity-100 scale-100\"\n                                            leaveTo=\"transform opacity-0 scale-95\"\n                                        >\n                                            <Menu.Items\n                                                static\n                                                className=\"origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none\"\n                                            >\n                                                <Menu.Item>\n                                                    {({ active }) => (\n                                                        <a\n                                                            href=\"/\"\n                                                            className={classNames(\n                                                                active\n                                                                    ? 'bg-gray-100'\n                                                                    : '',\n                                                                'block px-4 py-2 text-sm text-gray-700'\n                                                            )}\n                                                        >\n                                                            Your Profile\n                                                        </a>\n                                                    )}\n                                                </Menu.Item>\n                                                <Menu.Item>\n                                                    {({ active }) => (\n                                                        <a\n                                                            href=\"/\"\n                                                            className={classNames(\n                                                                active\n                                                                    ? 'bg-gray-100'\n                                                                    : '',\n                                                                'block px-4 py-2 text-sm text-gray-700'\n                                                            )}\n                                                        >\n                                                            Settings\n                                                        </a>\n                                                    )}\n                                                </Menu.Item>\n                                                <Menu.Item>\n                                                    {({ active }) => (\n                                                        <a\n                                                            href=\"/\"\n                                                            className={classNames(\n                                                                active\n                                                                    ? 'bg-gray-100'\n                                                                    : '',\n                                                                'block px-4 py-2 text-sm text-gray-700'\n                                                            )}\n                                                        >\n                                                            Logout\n                                                        </a>\n                                                    )}\n                                                </Menu.Item>\n                                            </Menu.Items>\n                                        </Transition>\n                                    </>\n                                )}\n                            </Menu>\n                        </div>\n                    </div>\n                </div>\n                <main className=\"flex-1 relative pb-8 z-0 overflow-y-auto\">\n                    {/* Page header */}\n                    <div className=\"bg-white shadow\">\n                        <div className=\"px-4 sm:px-6 lg:max-w-6xl lg:mx-auto lg:px-8\">\n                            <div className=\"py-6 md:flex md:items-center md:justify-between lg:border-t lg:border-gray-200\">\n                                <div className=\"flex-1 min-w-0\">\n                                    {/* Profile */}\n                                    <div className=\"flex items-center\">\n                                        <img\n                                            className=\"hidden h-16 w-16 rounded-full sm:block\"\n                                            src=\"https://upload.wikimedia.org/wikipedia/en/thumb/5/5d/Vancouver_Whitecaps_FC_logo.svg/180px-Vancouver_Whitecaps_FC_logo.svg.png\"\n                                            alt=\"\"\n                                        />\n                                        <div>\n                                            <div className=\"flex items-center\">\n                                                <img\n                                                    className=\"h-16 w-16 rounded-full sm:hidden\"\n                                                    src=\"https://upload.wikimedia.org/wikipedia/en/thumb/5/5d/Vancouver_Whitecaps_FC_logo.svg/180px-Vancouver_Whitecaps_FC_logo.svg.png\"\n                                                    alt=\"\"\n                                                />\n                                                <h1 className=\"ml-3 text-2xl font-bold leading-7 text-gray-900 sm:leading-9 sm:truncate\">\n                                                    Good morning, White Caps\n                                                    Association\n                                                </h1>\n                                            </div>\n                                            <dl className=\"mt-6 flex flex-col sm:ml-3 sm:mt-1 sm:flex-row sm:flex-wrap\">\n                                                <dt className=\"sr-only\">\n                                                    Company\n                                                </dt>\n                                                <dd className=\"flex items-center text-sm text-gray-500 font-medium capitalize sm:mr-6\">\n                                                    <OfficeBuildingIcon\n                                                        className=\"flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400\"\n                                                        aria-hidden=\"true\"\n                                                    />\n                                                    Duke street studio\n                                                </dd>\n                                                <dt className=\"sr-only\">\n                                                    Account status\n                                                </dt>\n                                                <dd className=\"mt-3 flex items-center text-sm text-gray-500 font-medium sm:mr-6 sm:mt-0 capitalize\">\n                                                    <CheckCircleIcon\n                                                        className=\"flex-shrink-0 mr-1.5 h-5 w-5 text-green-400\"\n                                                        aria-hidden=\"true\"\n                                                    />\n                                                    Verified account\n                                                </dd>\n                                            </dl>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"mt-6 flex space-x-3 md:mt-0 md:ml-4\">\n                                    {page === 'main' ? (\n                                        <>\n                                            <button\n                                                type=\"button\"\n                                                className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                                                onClick={() =>\n                                                    history.push('/create')\n                                                }\n                                            >\n                                                Add Workflow\n                                            </button>\n                                            {/* <button\n                        type=\"button\"\n                        className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                      >\n                        Delete Workflow\n                      </button> */}\n                                        </>\n                                    ) : (\n                                        <button\n                                            type=\"button\"\n                                            className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                                            onClick={() => history.push('/')}\n                                        >\n                                            Back to Dashboard\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </main>\n                {/* <WorkflowForm /> */}\n                {children ? children : <WorkflowTable value={{ search }} />}\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function MappingInput({\n    dbColumns,\n    sfMetadata,\n    tempMapping,\n    setTempMapping,\n    mappingKey,\n    mappingValue,\n    setAlertMessage,\n    setSnackbarOpen,\n}) {\n    const [metadata, setMetaData] = useState('');\n    const [column, setColumn] = useState('');\n    const [isAdded, setIsAdded] = useState(false);\n\n    // CDM & CDU\n    useEffect(() => {\n        if (mappingKey && mappingValue) {\n            setMetaData(mappingKey);\n            setColumn(mappingValue);\n            setIsAdded(true);\n        }\n    }, [mappingKey, mappingValue]);\n\n    // Handle alert message change\n    const handleAlertMessage = ({ type, message }) => {\n        setSnackbarOpen(true);\n        setAlertMessage({\n            type,\n            message,\n        });\n    };\n\n    const handleAddBtnClick = () => {\n        // Only let user add mapping when metadata and column are\n        // not empty\n        if (metadata && column) {\n            // Check if the key/value mapping already exists\n            if (\n                tempMapping.hasOwnProperty(metadata) &&\n                tempMapping[metadata] === column\n            ) {\n                handleAlertMessage({\n                    type: 'error',\n                    message: `${metadata}: ${column} mapping already exists`,\n                });\n            } else {\n                setTempMapping((prev) => ({\n                    ...prev,\n                    [metadata]: column,\n                }));\n\n                handleAlertMessage({\n                    type: 'success',\n                    message: `${metadata}: ${column} mapping added successfully`,\n                });\n            }\n        } else {\n            handleAlertMessage({\n                type: 'error',\n                message: 'Please select a metadata and a column',\n            });\n        }\n    };\n\n    const handleDeleteBtnClick = () => {\n        if (\n            tempMapping.hasOwnProperty(metadata) &&\n            tempMapping[metadata] === column\n        ) {\n            // Delete mapping input component\n            const result = Object.keys(tempMapping).reduce((object, key) => {\n                if (key !== metadata) {\n                    object[key] = tempMapping[key];\n                }\n                return object;\n            }, {});\n\n            setTempMapping(result);\n\n            handleAlertMessage({\n                type: 'success',\n                message: `${metadata}: ${column} mapping deleted successfully`,\n            });\n        }\n    };\n\n    return (\n        <div className=\"mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-5\">\n            <div className=\"sm:col-span-2\">\n                {/* SELECT DATABASE COLUMNS */}\n\n                <label\n                    htmlFor=\"metadata\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                >\n                    Salesforce Metadata\n                </label>\n                <select\n                    id=\"metadata\"\n                    name=\"metadata\"\n                    value={metadata}\n                    className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    onChange={(e) => setMetaData(e.target.value)}\n                    disabled={isAdded}\n                >\n                    <option value=\"\">Choose Metadata...</option>\n                    {sfMetadata.map((md, idx) => {\n                        return (\n                            <option value={md.name} key={idx}>\n                                {md.label}\n                            </option>\n                        );\n                    })}\n                </select>\n            </div>\n            <div className=\"sm:col-span-2\">\n                {/* SELECT DATABASE COLUMNS */}\n                <label\n                    htmlFor=\"columns\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                >\n                    Database Column\n                </label>\n                <select\n                    id=\"columns\"\n                    name=\"column\"\n                    value={column}\n                    className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                    onChange={(e) => setColumn(e.target.value)}\n                    disabled={isAdded}\n                >\n                    <option value=\"\">Choose Column...</option>\n                    {dbColumns.map((dbColumn, idx) => {\n                        return (\n                            <option value={dbColumn.column_name} key={idx}>\n                                {dbColumn.column_name}\n                            </option>\n                        );\n                    })}\n                </select>\n            </div>\n            <div className=\"sm:col-span-1 flex\">\n                {isAdded ? (\n                    <button\n                        type=\"button\"\n                        className=\"inline-flex items-center self-end px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                        style={{\n                            backgroundColor: '#ff0021',\n                        }}\n                        onClick={handleDeleteBtnClick}\n                    >\n                        DELETE\n                    </button>\n                ) : (\n                    <button\n                        type=\"button\"\n                        className=\"inline-flex items-center self-end px-5 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                        style={{\n                            backgroundColor: '#0891b2',\n                        }}\n                        onClick={handleAddBtnClick}\n                    >\n                        ADD\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n}\n","import { Fragment, useRef, useState, useEffect } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { ExclamationIcon } from '@heroicons/react/outline';\n\nexport default function Modal({ deleteWorkflow, delModalOpen, delModalClose }) {\n    const [open, setOpen] = useState(false);\n    const [processing, setProcessing] = useState(false);\n\n    const cancelButtonRef = useRef();\n    const deleteClicked = async () => {\n        await deleteWorkflow();\n    };\n\n    useEffect(() => {\n        if (delModalOpen) {\n            setOpen(true);\n        }\n    }, [delModalOpen]);\n\n    useEffect(() => {\n        delModalClose();\n    }, [delModalClose]);\n\n    return (\n        <Transition.Root show={open} as={Fragment}>\n            <Dialog\n                as=\"div\"\n                static\n                className=\"fixed z-10 inset-0 overflow-y-auto\"\n                initialFocus={cancelButtonRef}\n                open={open}\n                onClose={setOpen}\n            >\n                <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-out duration-300\"\n                        enterFrom=\"opacity-0\"\n                        enterTo=\"opacity-100\"\n                        leave=\"ease-in duration-200\"\n                        leaveFrom=\"opacity-100\"\n                        leaveTo=\"opacity-0\"\n                    >\n                        <Dialog.Overlay className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\n                    </Transition.Child>\n\n                    {/* This element is to trick the browser into centering the modal contents. */}\n                    <span\n                        className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\n                        aria-hidden=\"true\"\n                    >\n                        &#8203;\n                    </span>\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-out duration-300\"\n                        enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n                        enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n                        leave=\"ease-in duration-200\"\n                        leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n                        leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n                    >\n                        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n                            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                                <div className=\"sm:flex sm:items-start\">\n                                    <div className=\"mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\">\n                                        <ExclamationIcon\n                                            className=\"h-6 w-6 text-red-600\"\n                                            aria-hidden=\"true\"\n                                        />\n                                    </div>\n                                    <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                                        <Dialog.Title\n                                            as=\"h3\"\n                                            className=\"text-lg leading-6 font-medium text-gray-900\"\n                                        >\n                                            Delete Workflow\n                                        </Dialog.Title>\n                                        <div className=\"mt-2\">\n                                            <p className=\"text-sm text-gray-500\">\n                                                Are you sure you want to delete\n                                                this Workflow?\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n                                <button\n                                    type=\"button\"\n                                    style={{\n                                        backgroundColor: processing && 'grey',\n                                        opacity: processing && '50%',\n                                    }}\n                                    className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm\"\n                                    onClick={() => {\n                                        setProcessing(true);\n                                        deleteClicked();\n                                    }}\n                                >\n                                    {processing ? 'Deleting' : 'Delete'}\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n                                    onClick={() => setOpen(false)}\n                                    ref={cancelButtonRef}\n                                >\n                                    Cancel\n                                </button>\n                            </div>\n                        </div>\n                    </Transition.Child>\n                </div>\n            </Dialog>\n        </Transition.Root>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n    createWorkflow,\n    getSalesForceFlow,\n    getWorkflow,\n    updateWorkflow,\n    getDBTables,\n    getDBColumns,\n    deleteWorkflow,\n    getWorkflowInputs,\n    getMetadata,\n} from '../../api/network';\nimport { Switch } from '@headlessui/react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MappingInput from './MappingInput';\nimport { Snackbar, CircularProgress } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport DeleteModal from './DeleteModal';\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ');\n}\n\nexport default function UserForm() {\n    const history = useHistory();\n    const { id } = useParams();\n    const [workflows, setWorkflows] = useState([]);\n    const [formData, setFormData] = useState({\n        name: '',\n        desc: '',\n        flowUrl: '',\n        table: '',\n        column: '',\n        label: '',\n        type: '',\n        sObjectType: '',\n        whereClause: '',\n        mapping: {},\n        active: true,\n        runAgain: true,\n    });\n    const [dbTables, setDbTables] = useState([]);\n    const [dbColumns, setDBColumns] = useState([]);\n    const [sfMetadata, setSfMetadata] = useState([]);\n    const [processsing, setProcessing] = useState(false);\n    const [mappings, setMappings] = useState([]);\n    const [alertMessage, setAlertMessage] = useState({\n        type: '',\n        message: '',\n    });\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n    const [tempMapping, setTempMapping] = useState({});\n    const [delModalOpen, setDelModalOpen] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    // CDM & CDU\n    useEffect(() => {\n        (async () => {\n            // Get all database tables from the database\n            const dbTablesRes = await getDBTables();\n            setDbTables(dbTablesRes);\n\n            // Get all Salesforce flows from Salesforce Invoke Flow API\n            const sfFlowRes = await getSalesForceFlow();\n            setWorkflows(sfFlowRes);\n\n            // If there is an id in the url parameters then retrieve all\n            // the data for that workflow\n            if (id) {\n                const res = await getWorkflow(id);\n\n                setFormData({\n                    name: res.name,\n                    desc: res.description,\n                    flowUrl: res.flow_url,\n                    active: res.active,\n                    table: res.table,\n                    type: res.type,\n                    label: res.label,\n                    column: res.column,\n                    sObjectType: res.sobject_type,\n                    whereClause: res.where_clause,\n                    runAgain: res.run_again,\n                    mapping: res.mapping,\n                });\n\n                // Fetch and set Salesforce metadata\n                if (res.type === 'SOBJECT') {\n                    setIsLoading(true);\n                    const metadataRes = await getMetadata(res.sobject_type);\n                    setSfMetadata(metadataRes);\n                }\n\n                setTempMapping(res.mapping);\n\n                setIsLoading(false);\n            }\n        })();\n    }, [id]);\n\n    // CDU - Update when table selection changed\n    useEffect(() => {\n        (async () => {\n            setTempMapping({});\n\n            const dbColumnsRes = await getDBColumns(formData.table);\n            setDBColumns(dbColumnsRes);\n        })();\n    }, [formData.table]);\n\n    // CDU - Update when new mapping is added\n    useEffect(() => {\n        const temp = [];\n\n        for (const mappingKey in tempMapping) {\n            temp.push(\n                <MappingInput\n                    key={`${mappingKey}:${tempMapping[mappingKey]}`}\n                    sfMetadata={sfMetadata}\n                    dbColumns={dbColumns}\n                    tempMapping={tempMapping}\n                    setTempMapping={setTempMapping}\n                    mappingKey={mappingKey}\n                    mappingValue={tempMapping[mappingKey]}\n                    setSnackbarOpen={setSnackbarOpen}\n                    setAlertMessage={setAlertMessage}\n                />\n            );\n        }\n\n        setMappings([\n            ...temp,\n            <MappingInput\n                key={':'}\n                sfMetadata={sfMetadata}\n                dbColumns={dbColumns}\n                tempMapping={tempMapping}\n                setTempMapping={setTempMapping}\n                mappingKey=\"\"\n                mappingValue=\"\"\n                setSnackbarOpen={setSnackbarOpen}\n                setAlertMessage={setAlertMessage}\n            />,\n        ]);\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [tempMapping]);\n\n    // CDU - Reset mapping inputs whenever the workflow changes\n    useEffect(() => {\n        setMappings([\n            <MappingInput\n                key={':'}\n                sfMetadata={sfMetadata}\n                dbColumns={dbColumns}\n                tempMapping={tempMapping}\n                setTempMapping={setTempMapping}\n                mappingKey=\"\"\n                mappingValue=\"\"\n                setSnackbarOpen={setSnackbarOpen}\n                setAlertMessage={setAlertMessage}\n            />,\n        ]);\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sfMetadata, dbColumns]);\n\n    // Form validation\n    const validateForm = () => {\n        if (!formData.name) {\n            handleAlertMessage({\n                type: 'error',\n                message: 'Workflow name cannot be empty',\n            });\n\n            setProcessing(false);\n\n            return false;\n        } else if (!formData.table) {\n            handleAlertMessage({\n                type: 'error',\n                message: 'Please choose a database table',\n            });\n\n            setProcessing(false);\n\n            return false;\n        } else if (!formData.flowUrl) {\n            handleAlertMessage({\n                type: 'error',\n                message: 'Please choose a Salesforce flow',\n            });\n\n            setProcessing(false);\n\n            return false;\n        } else if (formData.type !== 'SOBJECT' && !formData.column) {\n            handleAlertMessage({\n                type: 'error',\n                message: 'Please choose a database column',\n            });\n\n            setProcessing(false);\n\n            return false;\n        } else if (\n            formData.type === 'SOBJECT' &&\n            Object.keys(tempMapping).length === 0\n        ) {\n            handleAlertMessage({\n                type: 'error',\n                message: 'Please set at least one mapping',\n            });\n\n            setProcessing(false);\n\n            return false;\n        }\n\n        return true;\n    };\n\n    // Makes a call to db to return query results\n    const submit = async (e) => {\n        e.preventDefault();\n\n        if (validateForm()) {\n            // Check if id url parameter exists\n            // TRUE: Update the workflow\n            // FALSE: Create a new workflow\n            if (id) {\n                await updateWorkflow(id, { ...formData, mapping: tempMapping });\n            } else {\n                await createWorkflow({ ...formData, mapping: tempMapping });\n            }\n\n            history.push('/');\n        }\n    };\n\n    // Handle alert message snackbar close event\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setSnackbarOpen(false);\n    };\n\n    // Handle form data change\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value || '' });\n    };\n\n    // Handle workflow dropdown list change\n    const handleWorkflowChange = async (e) => {\n        // Set mappings to an empty array first\n        setMappings([]);\n        // Also set tempMapping to an empty object\n        setTempMapping({});\n\n        if (e.target.value) {\n            const sfInputsRes = await getWorkflowInputs(e.target.value);\n\n            setFormData({\n                ...formData,\n                type: sfInputsRes.type,\n                label: sfInputsRes.label,\n                sObjectType: sfInputsRes.sObjectType,\n                column: '',\n                flowUrl: e.target.value,\n            });\n\n            // Fetch and set Salesforce metadata\n            if (sfInputsRes.type === 'SOBJECT') {\n                setIsLoading(true);\n                const metadataRes = await getMetadata(sfInputsRes.sObjectType);\n                setSfMetadata(metadataRes);\n                setIsLoading(false);\n            }\n        } else {\n            setFormData({\n                ...formData,\n                type: '',\n                label: '',\n                sObjectType: '',\n                column: '',\n                flowUrl: '',\n            });\n        }\n    };\n\n    // Handle alert message change\n    const handleAlertMessage = ({ type, message }) => {\n        setSnackbarOpen(true);\n        setAlertMessage({\n            type,\n            message,\n        });\n    };\n\n    const handleSwitchForRunAgain = (e) => {\n        setFormData({ ...formData, runAgain: e });\n\n        handleAlertMessage({\n            type: 'success',\n            message: e\n                ? 'Run once for each contact turn ON'\n                : 'Run once for each contact turn OFF',\n        });\n    };\n\n    const handleAutomationSwitch = (e) => {\n        setFormData({ ...formData, active: e });\n\n        handleAlertMessage({\n            type: 'success',\n            message: e ? 'Automation turn ON' : 'Automation turn OFF',\n        });\n    };\n\n    const handleDelete = async () => {\n        await deleteWorkflow(id);\n        history.push('/');\n    };\n\n    const delModalClose = () => {\n        setDelModalOpen(false);\n    };\n\n    const {\n        name,\n        desc,\n        flowUrl,\n        table,\n        column,\n        active,\n        type,\n        label,\n        sObjectType,\n        whereClause,\n        runAgain,\n    } = formData;\n\n    return (\n        <div className=\"m-8\">\n            <div className=\"hidden sm:block\" aria-hidden=\"true\">\n                <div className=\"py-5\">\n                    {/* <div className=\"border-t border-gray-200\" /> */}\n                </div>\n            </div>\n            <div className=\"mt-10 sm:mt-0\">\n                <div className=\"md:grid md:grid-cols-3 md:gap-6\">\n                    <div className=\"md:col-span-full\">\n                        <form onSubmit={submit}>\n                            <div className=\"shadow overflow-hidden sm:rounded-md\">\n                                <div className=\"px-4 py-5 bg-white sm:p-6\">\n                                    <div className=\"grid grid-cols-6 gap-6 \">\n                                        <div className=\"col-span-6 sm:col-span-4 mt-5\">\n                                            <label\n                                                htmlFor=\"name\"\n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                Name of the Workflow*\n                                            </label>\n                                            <input\n                                                type=\"text\"\n                                                name=\"name\"\n                                                id=\"name\"\n                                                placeholder=\"Enter name...\"\n                                                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                                                value={name}\n                                                onChange={handleChange}\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"grid grid-cols-6 gap-6\">\n                                        {/* SELECT DATABASAE TABLES */}\n                                        <div className=\"col-span-6 sm:col-span-3 mt-5\">\n                                            <label\n                                                htmlFor=\"tables\"\n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                Database Table*\n                                            </label>\n                                            <select\n                                                id=\"tables\"\n                                                name=\"table\"\n                                                value={table}\n                                                className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                                                onChange={handleChange}\n                                            >\n                                                <option value=\"\">\n                                                    Choose table...\n                                                </option>\n                                                {dbTables.map(\n                                                    (dbTable, idx) => {\n                                                        return (\n                                                            <option\n                                                                value={\n                                                                    dbTable.table_name\n                                                                }\n                                                                key={idx}\n                                                            >\n                                                                {\n                                                                    dbTable.table_name\n                                                                }\n                                                            </option>\n                                                        );\n                                                    }\n                                                )}\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div className=\"grid grid-cols-6 gap-6\">\n                                        {/* SELECT SALESFORCE FLOWS */}\n                                        <div className=\"col-span-6 sm:col-span-3 mt-5\">\n                                            <label\n                                                htmlFor=\"flowUrl\"\n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                Salesforce Flow*\n                                            </label>\n                                            <select\n                                                id=\"flowUrl\"\n                                                name=\"flowUrl\"\n                                                value={flowUrl}\n                                                className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                                                onChange={(e) => {\n                                                    handleWorkflowChange(e);\n                                                    handleChange(e);\n                                                }}\n                                            >\n                                                <option value=\"\">\n                                                    Choose flow...\n                                                </option>\n                                                {workflows.map(\n                                                    (workflow, idx) => {\n                                                        return (\n                                                            <option\n                                                                value={\n                                                                    workflow.url\n                                                                }\n                                                                key={idx}\n                                                            >\n                                                                {workflow.label}\n                                                            </option>\n                                                        );\n                                                    }\n                                                )}\n                                            </select>\n                                        </div>\n                                    </div>\n                                    {/* Show additional input or selection boxes only if table and workflow are selected */}\n                                    {table && flowUrl ? (\n                                        <>\n                                            <div className=\"mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6\">\n                                                <div className=\"sm:col-span-3\">\n                                                    <label\n                                                        htmlFor=\"inputs_type\"\n                                                        className=\"block text-sm font-medium text-gray-700\"\n                                                    >\n                                                        Salesforce Flow Inputs\n                                                        Type\n                                                    </label>\n                                                    <input\n                                                        type=\"text\"\n                                                        name=\"inputs_type\"\n                                                        id=\"inputs_type\"\n                                                        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                                                        value={\n                                                            sObjectType &&\n                                                            sObjectType !==\n                                                                'undefined'\n                                                                ? `${label} (${type} of Type=${sObjectType})`\n                                                                : `${label} (Type=${type})`\n                                                        }\n                                                        disabled\n                                                    />\n                                                </div>\n                                                {/* If not sObject type then show the column selection list*/}\n                                                {!sObjectType ||\n                                                sObjectType === 'undefined' ? (\n                                                    <div className=\"sm:col-span-3\">\n                                                        {/* SELECT DATABASE COLUMNS */}\n\n                                                        <label\n                                                            htmlFor=\"columns\"\n                                                            className=\"block text-sm font-medium text-gray-700\"\n                                                        >\n                                                            Database Column*\n                                                        </label>\n                                                        <select\n                                                            id=\"columns\"\n                                                            name=\"column\"\n                                                            value={column}\n                                                            className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n                                                            onChange={\n                                                                handleChange\n                                                            }\n                                                        >\n                                                            <option value=\"\">\n                                                                Choose Column...\n                                                            </option>\n                                                            {dbColumns.map(\n                                                                (\n                                                                    dbColumn,\n                                                                    idx\n                                                                ) => {\n                                                                    return (\n                                                                        <option\n                                                                            value={\n                                                                                dbColumn.column_name\n                                                                            }\n                                                                            key={\n                                                                                idx\n                                                                            }\n                                                                        >\n                                                                            {\n                                                                                dbColumn.column_name\n                                                                            }\n                                                                        </option>\n                                                                    );\n                                                                }\n                                                            )}\n                                                        </select>\n                                                    </div>\n                                                ) : null}\n                                            </div>\n                                            {/* Mapping dropdown lists */}\n                                            {sObjectType &&\n                                            sObjectType !== 'undefined' ? (\n                                                !isLoading ? (\n                                                    <div className=\"mappings\">\n                                                        {mappings}\n                                                    </div>\n                                                ) : (\n                                                    <CircularProgress\n                                                        style={{\n                                                            marginTop: 30,\n                                                        }}\n                                                    />\n                                                )\n                                            ) : null}\n                                            <div className=\"grid grid-cols-6 gap-6\">\n                                                <div className=\"col-span-6 sm:col-span-4 mt-5\">\n                                                    <label\n                                                        htmlFor=\"where_clause\"\n                                                        className=\"block text-sm font-medium text-gray-700\"\n                                                    >\n                                                        WHERE Clause\n                                                    </label>\n                                                    <input\n                                                        type=\"text\"\n                                                        name=\"whereClause\"\n                                                        id=\"where_clause\"\n                                                        placeholder=\"Enter WHERE clause...\"\n                                                        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                                                        value={whereClause}\n                                                        onChange={handleChange}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </>\n                                    ) : null}\n                                    <div className=\"grid grid-cols-6 gap-6\">\n                                        <div className=\"col-span-6 sm:col-span-3 mt-5\">\n                                            <label\n                                                htmlFor=\"description\"\n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                Description\n                                            </label>\n                                            <div className=\"mt-1\">\n                                                <textarea\n                                                    id=\"description\"\n                                                    name=\"desc\"\n                                                    rows={5}\n                                                    className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n                                                    placeholder=\"Enter description...\"\n                                                    value={desc}\n                                                    onChange={handleChange}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"col-span-6 sm:col-span-3 mt-5\">\n                                        <Switch.Group\n                                            as=\"div\"\n                                            className=\"flex items-center\"\n                                        >\n                                            <Switch\n                                                checked={active}\n                                                onChange={\n                                                    handleAutomationSwitch\n                                                }\n                                                className={classNames(\n                                                    active\n                                                        ? 'bg-indigo-600'\n                                                        : 'bg-gray-200',\n                                                    'relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'\n                                                )}\n                                            >\n                                                <span className=\"sr-only\">\n                                                    Use setting\n                                                </span>\n                                                <span\n                                                    aria-hidden=\"true\"\n                                                    className={classNames(\n                                                        active\n                                                            ? 'translate-x-5'\n                                                            : 'translate-x-0',\n                                                        'pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200'\n                                                    )}\n                                                />\n                                            </Switch>\n                                            <Switch.Label\n                                                as=\"span\"\n                                                className=\"ml-3\"\n                                            >\n                                                <span className=\"text-sm font-medium text-gray-900\">\n                                                    {active\n                                                        ? 'Automation active'\n                                                        : 'Automation paused'}\n                                                </span>\n                                            </Switch.Label>\n                                        </Switch.Group>\n                                    </div>\n                                    <div className=\"col-span-6 sm:col-span-3 mt-5\">\n                                        <Switch.Group\n                                            as=\"div\"\n                                            className=\"flex items-center\"\n                                        >\n                                            <Switch\n                                                checked={runAgain}\n                                                onChange={\n                                                    handleSwitchForRunAgain\n                                                }\n                                                className={classNames(\n                                                    runAgain\n                                                        ? 'bg-indigo-600'\n                                                        : 'bg-gray-200',\n                                                    'relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'\n                                                )}\n                                            >\n                                                <span className=\"sr-only\">\n                                                    Use setting\n                                                </span>\n                                                <span\n                                                    aria-hidden=\"true\"\n                                                    className={classNames(\n                                                        runAgain\n                                                            ? 'translate-x-5'\n                                                            : 'translate-x-0',\n                                                        'pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200'\n                                                    )}\n                                                />\n                                            </Switch>\n                                            <Switch.Label\n                                                as=\"span\"\n                                                className=\"ml-3\"\n                                            >\n                                                <span className=\"text-sm font-medium text-gray-900\">\n                                                    {runAgain\n                                                        ? 'Runs for same contacts repeatedly'\n                                                        : 'Only runs once for each contact'}\n                                                </span>\n                                            </Switch.Label>\n                                        </Switch.Group>\n                                    </div>\n                                </div>\n                                {/* Dont touch anything below this point */}\n                                <div className=\"px-4 py-3 bg-gray-50 text-right sm:px-6\">\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => history.push('/')}\n                                        className=\"mx-6 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                                    >\n                                        Cancel\n                                    </button>\n                                    {/* Only show delete button only when there is a URL id parameter */}\n                                    {id && (\n                                        <button\n                                            type=\"button\"\n                                            onClick={() =>\n                                                setDelModalOpen(true)\n                                            }\n                                            style={{\n                                                backgroundColor:\n                                                    processsing && 'grey',\n                                            }}\n                                            className=\"mr-6 inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                                        >\n                                            Delete Configuration\n                                        </button>\n                                    )}\n                                    <button\n                                        type=\"submit\"\n                                        onClick={() => setProcessing(true)}\n                                        style={{\n                                            backgroundColor:\n                                                processsing && 'grey',\n                                        }}\n                                        className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                                    >\n                                        {processsing\n                                            ? 'Saving...'\n                                            : 'Save Configuration'}\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            <Snackbar\n                open={snackbarOpen}\n                autoHideDuration={3000}\n                onClose={handleSnackbarClose}\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n            >\n                <Alert\n                    onClose={handleSnackbarClose}\n                    severity={alertMessage.type}\n                >\n                    {alertMessage.message}\n                </Alert>\n            </Snackbar>\n            <DeleteModal\n                deleteWorkflow={handleDelete}\n                delModalOpen={delModalOpen}\n                delModalClose={delModalClose}\n            />\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { getSalesForceFlow, getWorkflow } from '../../api/network';\nimport { useHistory, useParams } from 'react-router-dom';\n\nexport default function WorkflowDetail() {\n    const history = useHistory();\n    const { id } = useParams();\n\n    const [, setOptions] = useState([]);\n    const [, setFormData] = useState({\n        name: '',\n        desc: '',\n        flowUrl: '',\n        query: '',\n        active: true,\n    });\n\n    useEffect(() => {\n        (async () => {\n            const res = await getSalesForceFlow();\n            setOptions(res);\n        })();\n    }, []);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (id) {\n                    const res = await getWorkflow(id);\n                    setFormData({\n                        name: res.name,\n                        desc: res.desc,\n                        flowUrl: res.flow_url,\n                        query: res.sql_query,\n                        active: res.active,\n                    });\n                }\n            } catch (error) {\n                history.push('/404');\n            }\n        })();\n    }, [history, id]);\n\n    return <div className=\"ml-8\">Error Status Code: 404</div>;\n}\n","import React, { useState, useEffect } from 'react';\nimport { getWorkflowLogs } from '../../api/network';\nimport { useParams } from 'react-router-dom';\n\nexport default function ExecutionTable() {\n    const { id } = useParams();\n\n    const [logArray, setLogArray] = useState([]);\n\n    useEffect(() => {\n        (async () => {\n            if (id) {\n                const res = await getWorkflowLogs(id);\n                setLogArray(res);\n            }\n        })();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className=\"flex flex-col\">\n            <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n                <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n                    <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n                        <table className=\"min-w-full divide-y divide-gray-200\">\n                            <thead className=\"bg-gray-50\">\n                                <tr>\n                                    <th\n                                        scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                                    >\n                                        WorkFlow Id\n                                    </th>\n                                    <th\n                                        scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                                    >\n                                        WorkFlow Name\n                                    </th>\n                                    <th\n                                        scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                                    >\n                                        Time Executed\n                                    </th>\n                                    <th\n                                        scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                                    >\n                                        Execution Result\n                                    </th>\n                                    <th\n                                        scope=\"col\"\n                                        className=\"relative px-6 py-3\"\n                                    >\n                                        <span className=\"sr-only\">Edit</span>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"bg-white divide-y divide-gray-200\">\n                                {logArray.map((logs, i) => (\n                                    <tr key={i}>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                                            {logs.workflow_id}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {logs.action_name}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {new Date(\n                                                logs.time_of_completion\n                                            ).toLocaleString('en-US', {\n                                                timeZone: 'UTC',\n                                            })}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {logs.is_flow_successful}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\"></td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function DetailInput({ mapping, mappingKey }) {\n    return (\n        <>\n            {/* Salesforce MetaData field */}\n            <div className=\"mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6\">\n                <div className=\"sm:col-span-3\">\n                    <label\n                        htmlFor=\"inputs_type\"\n                        className=\"block text-sm font-medium text-gray-700\"\n                    >\n                        Salesforce MetaData : Database Column\n                    </label>\n                    <input\n                        type=\"text\"\n                        name=\"inputs_type\"\n                        id=\"inputs_type\"\n                        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                        value={`${mappingKey} : ${mapping}`}\n                        disabled\n                    />\n                </div>\n            </div>\n        </>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { getSalesForceFlow, getWorkflow } from '../../api/network';\nimport { useHistory, useParams } from 'react-router-dom';\nimport ExecutionTable from '../ExecutionTable/ExecutionTable';\nimport DetailInput from './DetailInput';\n\nexport default function WorkflowDetail() {\n    const history = useHistory();\n    const { id } = useParams();\n\n    const [, setOptions] = useState([]);\n\n    const [formData, setFormData] = useState({\n        name: '',\n        desc: '',\n        flowUrl: '',\n        query: '',\n        column: '',\n        label: '',\n        type: '',\n        sObjectType: '',\n        whereClause: '',\n        mapping: {},\n        active: true,\n        runAgain: true,\n    });\n\n    useEffect(() => {\n        (async () => {\n            const res = await getSalesForceFlow();\n            setOptions(res);\n        })();\n    }, []);\n\n    // CDM\n    useEffect(() => {\n        // try{\n        (async () => {\n            try {\n                const res = await getWorkflow(id);\n\n                setFormData({\n                    name: res.name,\n                    desc: res.description,\n                    flowUrl: res.flow_url,\n                    active: res.active,\n                    table: res.table,\n                    type: res.type,\n                    label: res.label,\n                    column: res.column,\n                    sObjectType: res.sobject_type,\n                    whereClause: res.where_clause,\n                    runAgain: res.run_again,\n                    mapping: res.mapping,\n                });\n            } catch (err) {\n                history.push('/404');\n            }\n        })();\n    }, [history, id]);\n\n    const {\n        name,\n        active,\n        type,\n        label,\n        sObjectType,\n        whereClause,\n        runAgain,\n        mapping,\n    } = formData;\n\n    return (\n        <div className=\"m-8\">\n            <div className=\"hidden sm:block\" aria-hidden=\"true\">\n                <div className=\"py-2\"></div>\n            </div>\n            <div className=\"mt-10 sm:mt-0\">\n                <div className=\"md:grid md:grid-cols-3 md:gap-6\">\n                    <div className=\"md:col-span-full\">\n                        <form>\n                            <div className=\"shadow overflow-hidden sm:rounded-md\">\n                                <div className=\"px-4 py-5 bg-white sm:p-6\">\n                                    <div className=\"grid grid-cols-6 gap-6 \">\n                                        <div className=\"col-span-7 sm:col-span-4 mt-5\">\n                                            <label\n                                                htmlFor=\"email_address\"\n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                Name of the Workflow\n                                            </label>\n                                            <input\n                                                disabled\n                                                type=\"text\"\n                                                name=\"name\"\n                                                id=\"name\"\n                                                placeholder=\"Name..\"\n                                                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                                                value={name}\n                                            />\n                                        </div>\n                                        <div className=\"mt-6 flex space-x-3 md:mt-0 md:ml-4\">\n                                            <td className=\"text-right px-6 py-4 text-right whitespace-nowrap text-sm text-gray-500\">\n                                                <button\n                                                    type=\"button\"\n                                                    className=\" inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                                                    onClick={() =>\n                                                        history.push(\n                                                            `/configure/${id}`\n                                                        )\n                                                    }\n                                                >\n                                                    Configure\n                                                </button>\n                                            </td>\n                                        </div>\n                                    </div>\n                                    <>\n                                        <div className=\"mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6\">\n                                            <div className=\"sm:col-span-3\">\n                                                <label\n                                                    htmlFor=\"inputs_type\"\n                                                    className=\"block text-sm font-medium text-gray-700\"\n                                                >\n                                                    Salesforce Flow Inputs Type\n                                                </label>\n                                                <input\n                                                    type=\"text\"\n                                                    name=\"inputs_type\"\n                                                    id=\"inputs_type\"\n                                                    className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                                                    value={\n                                                        sObjectType &&\n                                                        sObjectType !==\n                                                            'undefined'\n                                                            ? `${label} (${type} of Type=${sObjectType})`\n                                                            : `${label} (Type=${type})`\n                                                    }\n                                                    disabled\n                                                />\n                                            </div>\n                                            <div></div>\n                                        </div>\n                                        {/* Salesforce MetaData field */}\n                                        {/* {detailInputs}   */}\n                                        {mapping\n                                            ? Object.keys(\n                                                  mapping\n                                              ).map((key, i) => (\n                                                  <DetailInput\n                                                      key={i}\n                                                      mapping={mapping[key]}\n                                                      mappingKey={key}\n                                                  />\n                                              ))\n                                            : null}\n                                        <div className=\"grid grid-cols-6 gap-6\">\n                                            <div className=\"col-span-6 sm:col-span-4 mt-5\">\n                                                <label\n                                                    htmlFor=\"where_clause\"\n                                                    className=\"block text-sm font-medium text-gray-700\"\n                                                >\n                                                    WHERE Clause\n                                                </label>\n                                                <input\n                                                    type=\"text\"\n                                                    name=\"whereClause\"\n                                                    id=\"where_clause\"\n                                                    placeholder=\"\"\n                                                    className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                                                    value={whereClause}\n                                                    disabled\n                                                />\n                                            </div>\n                                        </div>\n                                    </>\n                                    <div className=\"grid grid-cols-6 gap-6 \">\n                                        <div className=\"col-span-6 sm:col-span-4 mt-5\">\n                                            <label\n                                                htmlFor=\"email_address\"\n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                Automation Status\n                                            </label>\n                                            <input\n                                                disabled\n                                                type=\"text\"\n                                                name=\"query\"\n                                                id=\"query\"\n                                                placeholder=\"SQL Query\"\n                                                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                                                value={active}\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"grid grid-cols-6 gap-6 \">\n                                        <div className=\"col-span-6 sm:col-span-4 mt-5\">\n                                            <label\n                                                htmlFor=\"email_address\"\n                                                className=\"block text-sm font-medium text-gray-700\"\n                                            >\n                                                Run for Same Contacts Repeatedly\n                                            </label>\n                                            <input\n                                                disabled\n                                                type=\"text\"\n                                                name=\"query\"\n                                                id=\"query\"\n                                                placeholder=\"SQL Query\"\n                                                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                                                value={runAgain}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            <div className=\"hidden sm:block\" aria-hidden=\"true\">\n                <div className=\"py-5\"></div>\n            </div>\n            <div className=\"mt-10 sm:mt-0\">\n                <div className=\"md:grid md:grid-cols-3 md:gap-6\">\n                    <div className=\"md:col-span-full\">\n                        <ExecutionTable />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport UserDash from './components/Landing/userDash';\nimport WorkflowForm from './components/WorkflowForm/WorfkflowForm';\nimport ErrorPage from './components/ErrorPage/ErrorPage';\nimport WorkflowDetail from './components/WorkflowDetails/WorkflowDetail';\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <UserDash page=\"main\" />\n                </Route>\n                <Route exact path=\"/create\">\n                    <UserDash children={<WorkflowForm />} />\n                </Route>\n                <Route exact path=\"/configure/:id\">\n                    <UserDash children={<WorkflowForm />} />\n                </Route>\n                <Route exact path=\"/details/:id\">\n                    <UserDash children={<WorkflowDetail />} />\n                </Route>\n                <Route exact path=\"/404\">\n                    <UserDash children={<ErrorPage />} />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}